
### Basic Command Line ###

1. `cal 2025`
   - Display the calendar for the year 2025.

2. `cal 01 2018`
   - Display the calendar for January 2018.

3. `ls`
   - List files and directories in the current directory.

4. `ls -l`
   - List files and directories with detailed information.

5. `ls -lF`
   - List files and directories with detailed information, appending a character indicating the file type.

6. `ls -lt`
   - List files and directories sorted by modification time, newest first.

7. `ls -lh`
   - List files and directories with detailed information in human-readable format.

8. `ls -la`
   - List all files and directories, including hidden ones, with detailed information.

9. `ls -R /etc`
   - List all files and directories in `/etc` recursively.

10. `pwd`
    - Print the current working directory.

11. `cd /usr/bin`
    - Change the current directory to `/usr/bin`.

12. `cd`
    - Change to the home directory.

13. `ls`
    - List files and directories in the current directory (home directory after the previous `cd`).

14. `cd ~/dir1`
    - Change to the `dir1` directory in the user's home directory.

15. `cd ~assulai`
    - Change to the home directory of the user `assulai`.

16. `cd /`
    - Change to the root directory.

17. `cd ..`
    - Change to the parent directory.

18. `cd -`
    - Change to the previous directory.

19. `tty`
    - Print the file name of the terminal connected to standard input.

20. `who`
    - Show who is logged on.

21. `who am i`
    - Show who is logged on and from where.

22. `w`
    - Show who is logged on and what they are doing.

23. `whoami`
    - Print the effective user ID.

24. `logname`
    - Print the user's login name.

25. `id`
    - Print user and group information.

26. `groups`
    - Print the groups a user is in.

27. `uname`
    - Print system information.

28. `uname -a`
    - Print all system information.

29. `uname -v`
    - Print the kernel version.

30. `uname -s`
    - Print the kernel name.

32. `uname -p`
    - Print the processor type.


34. `uname -r`
    - Print the kernel release.

35. `uname -m`
    - Print the machine hardware name.

36. `uname -i`
    - Print the hardware platform.

37. `uname -o`
    - Print the operating system.

38. `clear`
    - Clear the terminal screen.

39. `date`
    - Display the current date and time.

40. `hwclock`
    - Query and set the hardware clock (RTC).

41. `cal`
    - Display the current month's calendar.

42. `uptime`
    - Show how long the system has been running.

43. `which openssh`
    - Show the path of the `openssh` command.

44. `whereis openssh`
    - Locate the binary, source, and manual page files for `openssh`.

45. `wc /etc`
    - Count lines, words, and bytes in `/etc` (not typically useful for directories).

46. `wc /etc/profile`
    - Count lines, words, and bytes in `/etc/profile`.

47. `wc -n /etc/profile`
    - Invalid option; should be `-c` for bytes.

48. `wc -l /etc/profile`
    - Count lines in `/etc/profile`.

49. `wall`
    - Write a message to all users.

50. `file .bash_profile`
    - Determine the file type of `.bash_profile`.

51. `ls`
    - List files and directories in the current directory.

52. `file srv`
    - Determine the file type of `srv`.

53. `cd srv`
    - Change to the `srv` directory.

54. `ls`
    - List files and directories in the `srv` directory.

55. `cd`
    - Change to the home directory.

56. `file .bash_profile`
    - Determine the file type of `.bash_profile`.

57. `file /usr/bin/who`
    - Determine the file type of `/usr/bin/who`.

58. `ll /dev/sd*`
    - List detailed information about devices matching `/dev/sd*`.

59. `ll /dev/tty*`
    - List detailed information about devices matching `/dev/tty*`.

60. `touch file1`
    - Create an empty file named `file1` or update its timestamp.

61. `cat > file2`
    - Create a file named `file2` and write content to it from standard input.

62. `ll file2`
    - List detailed information about `file2`.

63. `mkdir scripts1`
    - Create a directory named `scripts1`.

64. `ll`
    - List detailed information about files and directories.

65. `ls -ltr`
    - List files and directories sorted by modification time, oldest first.

66. `cat /home/linuxcbt/.bash_profile`
    - Display the content of `/home/linuxcbt/.bash_profile`.

67. `more /home/linuxcbt/.bash_profile`
    - View the content of `/home/linuxcbt/.bash_profile` one screen at a time.

68. `less /home/linuxcbt/.bash_profile`
    - View the content of `/home/linuxcbt/.bash_profile` with navigation capabilities.

69. `head /home/linuxcbt/.bash_profile`
    - Display the first 10 lines of `/home/linuxcbt/.bash_profile`.

70. `head -3 /home/linuxcbt/.bash_profile`
    - Display the first 3 lines of `/home/linuxcbt/.bash_profile`.

71. `tail -3 /home/linuxcbt/.bash_profile`
    - Display the last 3 lines of `/home/linuxcbt/.bash_profile`.

72. `tail -f /var/log/messages`
    - Display the last lines of `/var/log/messages` and follow new additions.

73. `vi /home/linuxcbt/.bash_profile`
    - Edit `/home/linuxcbt/.bash_profile` using the `vi` editor.

74. `echo`
    - Print a blank line.

75. `echo ?`
    - Print the value of `?`, which expands to the status of the last command.

76. `cat file2`
    - Display the content of `file2`.

77. `cat file2 file1 > file3`
    - Concatenate `file2` and `file1` and write the output to `file3`.

78. `id`
    - Print user and group information.

79. `mkdir temp`
    - Create a directory named `temp`.

80. `rm -rf temp`
    - Remove the `temp` directory and its contents recursively and forcefully.

81. `uniq /home/linuxcbt/.bash_profile`
    - Filter out repeated lines from `/home/linuxcbt/.bash_profile`.

82. `strings /bin/cat`
    - Print the printable character sequences in the `/bin/cat` binary.

83. `string /home/linuxcbt/.bash_profile`
    - Invalid command; should be `strings`.

84. `strings /home/linuxcbt/.bash_profile`
    - Print the printable character sequences in `/home/linuxcbt/.bash_profile`.

85. `cp file1 newfile1`
    - Copy `file1` to `newfile1`.

86. `cp file scripts1/`
    - Copy `file` to the `scripts1` directory.

87. `ls`
    - List files and directories in the current directory.

88. `cp newfile1 scripts1/`
    - Copy `newfile1` to the `scripts1` directory.

89. `cp -i newfile1 file1`
    - Copy `newfile1` to `file1`, prompting before overwriting.

90. `mkdir subdir1`
    - Create a directory named `subdir1`.

91. `cp -r scripts1 subdir1`
    - Copy `scripts1` directory and its contents recursively to `subdir1`.

92. `mv -i file1 subdir1/`
    - Move `file1` to `subdir1/`, prompting before overwriting.

93. `mv file3 file4`
    - Rename `file3` to `file4`.

94. `mv scripts1 scripts2`
    - Rename `scripts1` directory to `scripts2`.

95. `ls`
    - List files and directories in the current directory.

96. `mv scripts1 scripts10`
    - Rename `scripts1` directory to `scripts10`.

97. `mv scripts2 scripts10`
    - Rename `scripts2` directory to `scripts10`.

98. `rm newfile1`
    - Remove the file `newfile1`.

99. `mkdir subdir100`
    - Create a directory named `subdir100`.

100. `rmdir subdir100`
    - Remove the empty directory `subdir100`.

101. `mkdir -p subdir100/subdir101`
    - Create the `subdir100` directory and its subdirectory

 `subdir101`.

102. `rm -ri subdir100`
     - Remove the `subdir100` directory and its contents recursively, prompting before each removal.

103. `stat install.log`
     - Display detailed information about `install.log`.

104. `stat -f /usr`
     - Display file system information for `/usr`.

105. `lsattr install.log`
     - Display file attributes on a Linux second extended file system.

106. `chattr -i install.log`
     - Remove the immutable attribute from `install.log`.

107. `chattr +i install.log`
     - Add the immutable attribute to `install.log`.

108. `lsattr install.log`
     - Display file attributes on `install.log`.

109. `rm install.log`
     - Remove `install.log`. (If immutable, this will fail.)

110. `chattr +a install.log`
     - Add the append-only attribute to `install.log`.

111. `cat /etc/fstab >> file1`
     - Append the contents of `/etc/fstab` to `file1`.

112. `chattr -ia file1`
     - Remove the immutable and append-only attributes from `file1`.

113. `chattr =ia file1`
     - Set the attributes of `file1` to immutable and append-only.

114. `grep user1 /etc/passwd`
     - Search for `user1` in `/etc/passwd`.

115. `grep user1 /etc/passwd /etc/group`
     - Search for `user1` in `/etc/passwd` and `/etc/group`.

116. `grep -l user1 /etc/passwd /etc/group`
     - List the file names containing `user1`.

117. `grep -n user1 /etc/passwd /etc/group`
     - Show the line numbers of matches for `user1` in `/etc/passwd` and `/etc/group`.

118. `grep -n root /etc/passwd /etc/group`
     - Show the line numbers of matches for `root` in `/etc/passwd` and `/etc/group`.

119. `grep -l root /etc/passwd /etc/group`
     - List the file names containing `root`.

120. `grep -v root /etc/passwd /etc/group`
     - Display lines not containing `root`.

121. `grep ^root /etc/passwd /etc/group`
     - Display lines starting with `root`.

122. `grep bash$ /etc/passwd /etc/group`
     - Display lines ending with `bash`.

123. `grep ^$ /etc/passwd /etc/group`
     - Display empty lines.

124. `grep ^root$ /etc/passwd /etc/group`
     - Display lines containing only `root`.

125. `grep -i root /etc/passwd /etc/group`
     - Case-insensitive search for `root` in `/etc/passwd` and `/etc/group`.

126. `ll /etc | grep -E "drwx|xin"`
     - List detailed information about directories and files in `/etc` matching `drwx` or `xin`.

127. `diff -c file1`
     - Invalid usage; should be `diff -c file1 file2` for context comparison.

128. `diff -c file1 file2`
     - Compare `file1` and `file2` with context output.

129. `find /dev -iname vol*`
     - Find files in `/dev` with names matching `vol*`, case-insensitive.

130. `find .-name file2 -print`
     - Invalid usage; should be `find . -name file2 -print`.

131. `find ~ -size -1G`
     - Find files in the home directory smaller than 1GB.

132. `find /home -user linuxcbt -group root`
     - Find files in `/home` owned by `linuxcbt` and belonging to the `root` group.

133. `find / -name core -not -user root`
     - Find files named `core` not owned by `root`.

134. `find /etc/rc.d -mine +120`
     - Invalid usage; should be `-mmin` for minutes or `-mtime` for days.

135. `find /etc/rc.d -mtime +120`
     - Find files in `/etc/rc.d` modified more than 120 days ago.

136. `find /etc/rc.d -mtime -90`
     - Find files in `/etc/rc.d` modified within the last 90 days.

137. `find /dev -type c -perm 666`
     - Find character devices in `/dev` with permissions 666.

138. `find /dev -type c -perm 777`
     - Find character devices in `/dev` with permissions 777.

139. `find /dev -type l -perm 777`
     - Find symbolic links in `/dev` with permissions 777.

140. `find /dev -type l -perm 444`
     - Find symbolic links in `/dev` with permissions 444.

141. `find /dev -type -perm 444`
     - Invalid usage; should specify the type.

142. `find /usr -perm -444`
     - Find files in `/usr` with at least read permissions for all.

143. `find /dev -type c -perm -222`
     - Find character devices in `/dev` with at least write permissions for all.

144. `find /dev -type c -perm +222`
     - Find character devices in `/dev` with at least one write permission bit set.

145. `find / -name core -exec rm {} \;`
     - Find and remove files named `core`.

146. `locate passwd`
     - Find files with names containing `passwd`.

147. `locate -n 3 passwd`
     - Find up to 3 files with names containing `passwd`.

148. `locate -n 5 .sh`
     - Find up to 5 files with names containing `.sh`.

149. `vi file10`
     - Edit `file10` using the `vi` editor.

150. `sort file10`
     - Sort the contents of `file10`.

151. `sort -k 2 -n file10`
     - Sort `file10` numerically by the second column.

152. `sort -k 2 -nr file10`
     - Sort `file10` numerically by the second column in reverse order.

153. `ll | sort`
     - List detailed information about files and directories, then sort the output.

154. `ll -a /etc/skel/ | sort -k 6M`
     - List detailed information about files in `/etc/skel/` and sort by the sixth column (modification time).

155. `ll -a /etc/skel/ | sort -k 6M -o /tmp/sort.out`
     - List detailed information about files in `/etc/skel/`, sort by the sixth column, and save the output to `/tmp/sort.out`.

156. `history`
     - Display the command history.

157. `export`
     - List or set environment variables.

158. `LOGNAME`
     - Invalid usage; should be `echo $LOGNAME` to print the login name.

159. `more`
     - Invalid usage; typically requires a file to read.

160. `mkdir temp && cp -v file1 temp/ && ls -l temp`
     - Create a `temp` directory, copy `file1` to `temp` with verbose output, and list detailed information about `temp`.

161. `dmseg | grep -i cp`
     - Invalid command; should be `dmesg`.

162. `dmseg | grep -i 'cp'`
     - Invalid command; should be `dmesg`.

163. `ps`
     - Display currently running processes.

164. `top`
     - Display real-time system information and process list.

165. `free`
     - Display memory usage.

166. `df`
     - Display disk space usage.

167. `df -h`
     - Display disk space usage in human-readable format.

168. `cat /proc/cpuinfo`
     - Display CPU information.

169. `ls`
     - List files and directories in the current directory.

170. `touch file1`
     - Create an empty file named `file1` or update its timestamp.

171. `ln -s file1 file10`
     - Create a symbolic link `file10` pointing to `file1`.

172. `ln -s file1 file11`
     - Create a symbolic link `file11` pointing to `file1`.

173. `ls -l`
     - List detailed information about files and directories.

174. `stat file1`
     - Display detailed information about `file1`.

175. `stat file11`
     - Display detailed information about `file11`.

176. `ln file2 file22`
     - Create a hard link `file22` pointing to `file2`.

177. `ll`
     - List detailed information about files and directories.

178. `stat file2`
     - Display detailed information about `file2`.

179. `stat file22`
     - Display detailed information about `file22`.

### Compression Utilities ###

180. `seq 1000 > 1million.txt`
     - Generate a sequence of numbers from 1 to 1000 and save to `1million.txt`.

181. `gzip -c 1million.txt`
     - Compress `1million.txt` and write the output to standard output.

182. `gzip -d 1million.txt.gz`

 `gzip -d 1million.txt.gz` to decompress.

183. `gzip -l 1million.txt.gz`
     - List information about the compressed file `1million.txt.gz`.

184. `gzip -c 1million.txt >> 1million.txt.gz`
     - Append the compressed `1million.txt` to `1million.txt.gz`.

185. `ls -ltr`
     - List files in reverse chronological order.

186. `gzip -l 1million.txt.gz`
     - List information about the compressed file `1million.txt.gz`.

187. `zcat 1million.txt.gz`
     - Display the contents of `1million.txt.gz` without decompressing to disk.

188. `gunzip 1million.txt.gz`
     - Decompress `1million.txt.gz`.

189. `gzip -c 1million.txt >> 1million.txt2`
     - Compress `1million.txt` and append the output to `1million.txt2`.

190. `bzip -c 1million.txt >> 1million.txt.bz2`
     - Invalid command; should be `bzip2`.

191. `bzip2 -c 1million.txt >> 1million.txt.bz2`
     - Compress `1million.txt` and append the output to `1million.txt.bz2`.

192. `ls -lte`
     - List files sorted by modification time.

193. `ls -ltr`
     - List files in reverse chronological order.

194. `bunzip2 -c 1million.txt.bz2 > 1million.txt3`
     - Decompress `1million.txt.bz2` to `1million.txt3`.

195. `bzcat 1million.txt.bz2`
     - Display the contents of `1million.txt.bz2` without decompressing to disk.

196. `zip 1million.txt.zip 1million.txt`
     - Compress `1million.txt` into `1million.txt.zip`.

197. `unzip 1million.txt.zip`
     - Decompress `1million.txt.zip`.

198. `zcat 1million.txt.zip`
     - Invalid usage; should be `unzip`.

199. `tar -cvf temp.tar temp/`
     - Create a tarball `temp.tar` from the `temp/` directory.

200. `tar -tvf temp.tar`
     - List the contents of `temp.tar`.

201. `tar -cvjf temp.tar.gz temp/`
     - Create a bzip2 compressed tarball `temp.tar.bz2` from `temp/`.

202. `tar -cvjf temp.tar.bz2 temp/`
     - Create a bzip2 compressed tarball `temp.tar.bz2` from `temp/`.

203. `tar -xvf temp.tar.gz`
     - Extract the contents of `temp.tar.gz`.

204. `du -ch`
     - Summarize disk usage of each file and directory, displaying a total at the end.

205. `du –chs`
     - Summarize disk usage of each file and directory, displaying a total at the end (invalid option format).

### Backup and Restore ###

206. `dump`
     - Perform filesystem backups (usage requires more options).

207. `dump 0uvf /dev/pt1 /boot`
     - Perform a level 0 (full) dump of `/boot` to `/dev/pt1`.

208. `cat /etc/dumpdates`
     - Display the dump date records.

209. `dump 2uvf /dev/pt1 /boot`
     - Perform a level 2 dump of `/boot` to `/dev/pt1`.

210. `dump 1uvf /dev/pt1 /boot`
     - Perform a level 1 dump of `/boot` to `/dev/pt1`.

211. `cd /tmp`
     - Change directory to `/tmp`.

212. `restore rf /dev/pt1`
     - Restore a file system from a dump tape.

213. `cd /var/tmp/`
     - Change directory to `/var/tmp/`.

214. `restore xf /dev/pt1 /boot/grub//grub.conf`
     - Restore `/boot/grub/grub.conf` from a dump tape.

215. `restore if /dev/pt1`
     - Interactive restore from a dump tape.

216. `tar cvf /dev/pt1 /home/`
     - Create a tarball of `/home` on `/dev/pt1`.

217. `tar cvf 192.168.75.20:/dev/pt1 /home/`
     - Invalid usage; remote tarball creation requires additional setup.

218. `tar cvf 192.168.75.20:/dev/pt1 /home`
     - Invalid usage; remote tarball creation requires additional setup.

219. `tar cvf 192.168.75.20:/ /home`
     - Invalid usage; remote tarball creation requires additional setup.

220. `tar cvf 192.168.75.20:/`
     - Invalid usage; remote tarball creation requires additional setup.

221. `tar cvf /tmp/firstbootX.log.tar file1 fil2`
     - Create a tarball `/tmp/firstbootX.log.tar` from `file1` and `fil2`.

222. `tar tvf /dev/pt1`
     - List the contents of a tarball on `/dev/pt1`.

223. `tar xvf /dev/pt1`
     - Extract the contents of a tarball on `/dev/pt1`.

224. `tar cvjf /dev/pt1 /home`
     - Create a bzip2 compressed tarball of `/home` on `/dev/pt1`.

225. `rsync -avz /boot/grub/grub.conf /home`
     - Synchronize `/boot/grub/grub.conf` to `/home`.

226. `rsync -av /boot/grub/grub.conf /tmp`
     - Synchronize `/boot/grub/grub.conf` to `/tmp`.

227. `rsync -av /boot/grub/grub.conf linuxcbtserv1:/tmp`
     - Synchronize `/boot/grub/grub.conf` to a remote host.

228. `scp /boot/grub/grub.conf 192.168.75.20:/home`
     - Securely copy `/boot/grub/grub.conf` to a remote host.

229. `rsync -av linuxcbtserv1:/boot/grub/grub.conf  /home/`
     - Synchronize from a remote host to `/home`.

230. `scp linuxcbtserv1:/boot/grub/grub.conf /home`
     - Securely copy from a remote host to `/home`.

231. `ls -ltr /home/`
     - List detailed information about files in `/home` in reverse chronological order.

232. `find .| cpio -ov > /dev/pt1`
     - Find files in the current directory and archive them to `/dev/pt1` using `cpio`.

233. `find .-mtime -7 | cpio -ov > /tmp/mod.cpio`
     - Find files modified in the last 7 days and archive them to `/tmp/mod.cpio`.

234. `cpio -itv`
     - List the contents of a `cpio` archive (input required).

235. `cpio -iv`
     - Extract files from a `cpio` archive (input required).

### Checksums ###

236. `md5sum 1million.txt`
     - Compute and display the MD5 checksum of `1million.txt`.

237. `md5sum 1million.txt2`
     - Compute and display the MD5 checksum of `1million.txt2`.

238. `attr 1million.txt`
     - Invalid usage; should specify an action.

239. `attr -s 1million.txt`
     - Invalid usage; should specify an attribute.

240. `sha1sum 1million.txt`
     - Compute and display the SHA-1 checksum of `1million.txt`.

241. `sha1sum 1million.txt > 1million.txt.sha1sums`
     - Compute the SHA-1 checksum of `1million.txt` and save to `1million.txt.sha1sums`.

242. `cat 1million.txt.sha1sums`
     - Display the contents of `1million.txt.sha1sums`.

243. `sha1sum -c 1million.txt.sha1sums`
     - Verify the SHA-1 checksum of `1million.txt` against `1million.txt.sha1sums`.

244. `sha224sum 1million.txt >> 1million.txt.sha224`
     - Compute the SHA-224 checksum of `1million.txt` and append to `1million.txt.sha224`.

245. `sha224sum 1million.txt.sha224`
     - Compute and display the SHA-224 checksum of `1million.txt.sha224`.

246. `sha224sum -c 1million.txt.sha224`
     - Verify the SHA-224 checksum of `1million.txt` against `1million.txt.sha224`.

247. `sha256sum 1million.txt > 1million.txt.sha256`
     - Compute the SHA-256 checksum of `1million.txt` and save to `1million.txt.sha256`.

248. `sha256sum -c 1million.txt.sha256`
     - Verify the SHA-256 checksum of `1million.txt` against `1million.txt.sha256`.

249. `sha384sum 1million.txt`
     - Compute and display the SHA-384 checksum of `1million.txt`.

250. `sha384sum 1million.txt > 1million.txt.sha384`
     - Compute the SHA-384 checksum of `1million.txt` and save to `1million.txt.sha384`.

251. `sha384sum -c 1million.txt.sha384`
     - Verify the SHA-384 checksum of `1million.txt` against `1million.txt.sha384`.

252. `sha512sum 1million.txt`
     - Compute and display the SHA-512 checksum of `1million.txt`.

253. `sha512sum -c 1million.txt.sha512`
     - Verify the SHA-512 checksum of `1million.txt` against `1million.txt.sha512`.

254. `gpg --verify *asc`
     - Verify the signature of a file.


# Verify checksums of files against a SHA384 checksum file
sha384sum -c 1million.txt.sha3

# Display the contents of the SHA384 checksum file
cat 1million.txt.sha3

###### VI Editor########

Certainly! The `vi` (or `vim`) editor is a powerful text editor in Unix-like systems, widely used for its efficiency and capabilities. Here are some familiar syntax and commands to get started with `vi`:

### Basic Modes:
1. **Normal Mode**: The default mode for navigation and manipulation.
2. **Insert Mode**: For inserting text.
3. **Visual Mode**: For selecting text.
4. **Command Mode**: For executing commands.

### Basic Commands:

#### Opening and Closing `vi`:
- **Open a file**: `vi filename`
- **Save changes and exit**: `:wq` or `ZZ`
- **Exit without saving**: `:q!`

#### Switching Modes:
- **Enter Insert Mode**: `i` (before the cursor), `I` (start of the line), `a` (after the cursor), `A` (end of the line), `o` (open a new line below), `O` (open a new line above)
- **Return to Normal Mode**: `Esc`

#### Navigation in Normal Mode:
- **Move cursor left, down, up, right**: `h`, `j`, `k`, `l`
- **Move to beginning of the line**: `0`
- **Move to end of the line**: `$`
- **Move to the beginning of the file**: `gg`
- **Move to the end of the file**: `G`
- **Move to a specific line number**: `:n` (where `n` is the line number)

#### Editing Text:
- **Delete character under the cursor**: `x`
- **Delete current line**: `dd`
- **Delete until end of line**: `D`
- **Change (delete and enter Insert Mode)**: `cw` (change word), `cc` (change line)
- **Undo last change**: `u`
- **Redo undone change**: `Ctrl + r`
- **Yank (copy) a line**: `yy`
- **Yank (copy) a word**: `yw`
- **Paste after the cursor**: `p`
- **Paste before the cursor**: `P`

#### Visual Mode:
- **Enter Visual Mode**: `v` (character-wise), `V` (line-wise), `Ctrl + v` (block-wise)
- **Select and yank (copy)**: `y`
- **Select and delete**: `d`

#### Search and Replace:
- **Search for a pattern**: `/pattern` (forward), `?pattern` (backward)
- **Next occurrence**: `n`
- **Previous occurrence**: `N`
- **Replace first occurrence on the current line**: `:s/old/new`
- **Replace all occurrences on the current line**: `:s/old/new/g`
- **Replace in the whole file**: `:%s/old/new/g`

#### Working with Multiple Files and Windows:
- **Open a new file**: `:e filename`
- **Switch between files**: `:n` (next), `:prev` (previous)
- **Split window horizontally**: `:split filename` or `:sp filename`
- **Split window vertically**: `:vsplit filename` or `:vsp filename`
- **Navigate between splits**: `Ctrl + w + w` (cycle), `Ctrl + w + h/j/k/l` (specific direction)

### Example Workflow:
1. **Open a file**: `vi myfile.txt`
2. **Enter Insert Mode**: `i`
3. **Type your text**.
4. **Return to Normal Mode**: `Esc`
5. **Save and exit**: `:wq`

###Delete all lines:#####

Type gg to move the cursor to the beginning of the file.
Type dG to delete all lines from the current line (the first line) to the end of the file.
 **Return to Normal Mode**: `Esc`
 **Save and exit**: `:wq`

### Cheat Sheet Summary:
- **i**: Enter Insert Mode before cursor
- **Esc**: Return to Normal Mode
- **:wq**: Save and exit
- **:q!**: Exit without saving
- **h/j/k/l**: Move cursor left/down/up/right
- **0/$**: Move to beginning/end of the line
- **gg/G**: Move to beginning/end of the file
- **dd**: Delete current line
- **u/Ctrl + r**: Undo/redo
- **yy/p**: Yank (copy) line/paste after cursor
- **/pattern**: Search for pattern


 
### GREP ###

# Search for "linux" in /etc/passwd
grep "linux" /etc/passwd

# Case-insensitive search for "linux" in /etc/passwd
grep -i "linux" /etc/passwd

# Search for lines containing "2" in /etc/passwd
grep "2" /etc/passwd

# Search for lines ending with "2011" in /etc/passwd
grep "2011$" /etc/passwd

# Case-insensitive search for lines starting with "linux" in /etc/passwd
grep -i "^linux" /etc/passwd

# Search for empty lines in /etc/passwd
grep -i "" /etc/passwd

# Search for lines starting with "l" followed by any characters and ending with "cbt" in /etc/passwd
grep -i "^l.*cbt" /etc/passwd

# Search for lines containing "red" or "2011" in /etc/passwd
grep -i "red|2011" /etc/passwd

# Display lines before and after the line containing "jan 9" in /var/log/messages
grep -1 '^jan 9' /var/log/messages 

# Display lines before and after lines starting with "jan" in /var/log/messages
grep -1 '^jan' /var/log/messages 
  
### AWK ###

# Print all lines of /etc/passwd
awk '{print $0}' /etc/passwd

# Print all lines of /etc/passwd followed by the first field
awk '{print $0,$1}' /etc/passwd

# Print lines containing "red" followed by the first field of /etc/passwd
awk '/red/ {print $0,$1}' /etc/passwd

# Print lines containing "lin" followed by the first field of /etc/passwd
awk '/lin/ {print $0,$1}' /etc/passwd

# Print lines containing "lin" followed by "--" and the first field of /etc/passwd
awk '/lin/ {print $0,"--",$1}' /etc/passwd

# Print lines containing "lin" followed by "--", the first field, "===", and the second field of /etc/passwd
awk '/lin/ {print $0,"--",$1,"===",$2}' /etc/passwd

# Print "==", all lines of /etc/passwd, "==", the first field, "===", and the second field
awk '/lin/ {print "==",$0,"==",$1,"===",$2}' /etc/passwd

# Print lines where the second field contains "2017" in /etc/passwd
awk '{if ($2 ~ /2017/) print $0}' /etc/passwd

# Print lines where any field contains "201" in /etc/passwd
awk '{ /201/ print $0}' /etc/passwd

# Print lines where any field contains "201" in /etc/passwd
awk ' /201/ {print $0}' /etc/passwd

# Print the fourth, fifth, and sixth fields of lines where the second field contains "9" in /etc/passwd
awk '{if ($2 ~ /9/) print $4,$5,$6}' /etc/passwd
  
### sed (stream editor)###

# Print the first line of /etc/passwd
sed -n '1p' /etc/passwd

# Print the second line of /etc/passwd
sed -n '2p' /etc/passwd

# Print lines 2 to 13 of /etc/passwd
sed -n 2,13p /etc/passwd

# Print lines 2 to 1 of /etc/passwd (incorrect command, corrected as "sed -n '2,1p' /etc/passwd")
sed -n '2,1p' /etc/passwd

# Print all lines except lines 2 to 1 of /etc/passwd
sed -n '2,1!p' /etc/passwd

# Print lines containing "44" in /etc/passwd
sed -n -e '/44/p' /etc/passwd

# Print lines containing "4" in /etc/passwd
sed -n -e '/4/p' /etc/passwd

# Print lines ending with "4" in /etc/passwd
sed -n -e '/4$/p' /etc/passwd

# Print lines starting with "4" in /etc/passwd
sed -n -e '/^4/p' /etc/passwd

# Print lines starting and ending with "4" in /etc/passwd
sed -n -e '/^4$/p' /etc/passwd

# Print lines containing any digit in /etc/passwd
sed -n -e '/[0-9]/p' /etc/passwd

# Print lines ending with a 4-digit number in /etc/passwd
sed -n -e '/[0-9][0-9][0-9][0-9]$/p' /etc/passwd

# Print lines starting with "d" and ending with "lin" in /etc/passwd
sed -n -e '/^d/,/lin/p' /etc/passwd

# Print lines starting with "re" and the next 2 lines in /etc/passwd
sed -n -e '/^re/,+2p' /etc/passwd

# Print lines starting with "li" and the next 2 lines in /etc/passwd
sed -n -e '/^li/,+2p' /etc/passwd

# Remove blank lines from /etc/passwd and display the result
sed -e '/^$/d' /etc/passwd

# Substitute "2010" with "2011" in /etc/passwd and print lines with "2011"
sed -n -e 's/2010/2011/p' /etc/passwd
  
### Perl ###

# Print "hello world" using Perl
perl -e 'print "hello world\n"'

# Print "hello world" using Perl
perl -e 'print "hello world\n"'

# Print "hello world;" using Perl
perl -e 'print "hello world\n;"'

# Print "faraj assulai" using Perl
perl -e '$fname = "faraj"; $lname= "assulai"; print "$fname $lname\n";' -w 

### File Permission Types ###

# Add execute permission for the owner to file1
chmod u+x file1

# Add write permission for the owner to file1
chmod u+w file1

# Add write permission for the group and others to file1
chmod go+w file1

# Remove write permission for others from file1
chmod o-w file1

# Set read, write, and execute permissions for owner, group, and others to file1
chmod a=rwx file1

# Set permissions 544 (owner: read and execute, group: read, others: read) to file2
chmod 544 file2

# Set permissions 744 (owner: read, write, and execute, group: read, others: read) to file2
chmod 744 file2

# Set permissions 774 (owner: read, write, and execute, group: read and write, others: read) to file2
chmod 774 file2

# Set permissions 776 (owner: read, write, and execute, group: read and write, others: read and write) to file2
chmod 776 file2

# Set permissions 764 (owner: read, write, and execute, group: read, others: read) to file2
chmod 764 file2

# Display permissions of file2
ls -l file2

# Set permissions 777 (owner: read, write, and execute, group: read, write, and execute, others: read, write, and execute) to file2
chmod 777 file2

# Display the current umask value
umask 

# Display the umask value in symbolic notation
umask -S

# Display permissions of file10
ls -n file10

# Create directory dir10
mkdir dir10

# Display details of directory dir10
ls -d dir10

# Display numerical permissions of file10
ls -n file10

# Add user user2
useradd user2

# Change owner of file10 to user2
chown user2 file10

# Display permissions and owner/group of file10
ls -l file10

# Change group of file10 to user2
chgrp user2 file10

# Display permissions and owner/group of file10
ls -l file10

# Change owner and group of file10 to root
chown root:root file10

# Display permissions and owner/group of file10
ls -l file10

# Display contents of current directory
ls

# List contents of directory scripts10
ls scripts10/

# Create nested directories scripts10/script1.script3
mkdir -p scripts10/script1.script3

# Change owner and group of scripts10 and its contents to user2
chown -R user2:user2 scripts10

# Display details of /bin/su
ls /bin/su

Here are the remaining commands with comments added:


# Set permissions 755 (owner: read, write, and execute, group: read and execute, others: read and execute) to /bin/su
chmod 755 /bin/su

# Display permissions and details of /bin/su
ls -l /bin/su

# Set permissions 4755 (owner: read, write, and execute, group: read and execute with setuid bit, others: read and execute with setuid bit) to /bin/su
chmod 4755 /bin/su

# Display permissions and details of /bin/su
ls -l /bin/su

# Set permissions 2555 (owner: read and execute, group: read and execute, others: read and execute with setgid bit) to file10
chmod 2555 file10

# Display permissions and details of file10
ls -l file10

# Remove the setgid bit from file10
chmod g-s file10

# Display permissions and details of file10
ls -l file10

# Add the setgid bit to file10
chmod g+s file10

# Display permissions and details of file10
ls -l file10

# Create directory /sdata
mkdir /sdata

# Add the sticky bit to /sdata (allowing only owners to delete their own files within /sdata)
chmod o+s /sdata/

# Display permissions and details of /sdata
ls -ld /sdata/

# Set permissions 2770 (owner: read, write, and execute, group: read, write, and execute with sticky bit, others: no permissions) to /sdata
chmod 2770 /sdata/

# Display permissions and details of /sdata
ls -ld /sdata/

# Add the sticky bit to /tmp (allowing only owners to delete their own files within /tmp)
chmod o+t /tmp

# Display permissions and details of /tmp
ls -ld /tmp/

# Add the sticky bit to /sdata (allowing only owners to delete their own files within /sdata)
chmod o+t /sdata/

# Display permissions and details of /sdata
ls -ld /sdata/

# Create a symbolic link file11 pointing to file1
ln -s file1 file11

# Create a symbolic link file111 pointing to file1
ln -s file1 file111

# Display details of file111 (symbolic link)
ls -l file111

# Create a hard link file222 pointing to file2
ln file2 file222

# Display details of file2 and file222
ls file2 file222

# Create a hard link file444 pointing to file4
ln file4 file444

# Display details of file4 and file444
ls -l file4
```
Here are the commands related to user and group management with added comments:


# Display contents of /etc/passwd file
cat /etc/passwd

# Display contents of /etc/group file
cat /etc/group

# Display contents of /etc/shadow file (contains password hashes)
cat /etc/shadow

# Display contents of /etc/gshadow file (contains group password hashes)
cat /etc/gshadow

# Check the integrity of password files
pwck

# Run pwck again to verify integrity
pwck

# Convert the password file to shadow passwords
pwconv

# Display permissions and details of /etc/shadow file
ls -l /etc/shadow

# Revert back from shadow passwords to traditional password file
pwunconv

# Display permissions and details of /etc/shadow file after reverting
ls -l /etc/shadow

# Convert group file to gshadow file
grpconv

# Display permissions and details of /etc/gshadow file
ls -l /etc/gshadow

# Revert back from gshadow to group file
grpunconv

# Display permissions and details of /etc/gshadow file after reverting
ls -l /etc/gshadow

# Create a new user 'assulai1' with UID 550, create home directory, copy files from /etc/skel, set shell to /bin/bash
useradd -u 550 -m -d /home/assulai1 -k /etc/skel -s /bin/bash assulai1

# Set password for user 'assulai1'
passwd assulai1

# Create a new user 'user1'
useradd user1

# Display information about user1 from /etc/passwd
grep user1 /etc/passwd

# Display default useradd configuration
useradd -D

# Change default home directory base to /usr/home
useradd -D -b /usr/home

# Display default useradd configuration again
useradd -D

# Reset default home directory base to /home
useradd -D

# Display default useradd configuration
useradd -D

# Set minimum password age to 7 days, maximum to 30 days, warning at 6 days before expiration, and expire on 2021-21-21 for user 'assulai1'
chage -m 7 -M 30 -W 6 -E 2017-21-21 assulai1

# Convert password file to shadow passwords again
pwconv

# Display password expiration information for user 'assulai1'
chage -l assulai1

# Reset password expiration date to 2017-21-21 for user 'assulai1'
chage -m 7 -M 30 -W 6 -E 2017-21-21 assulai1

# Display password expiration information for user 'assulai1'
chage -l assulai1

# Set minimum password age to 5 days for user 'assulai1'
chage -m 5 assulai1

# Expire password for user 'assulai'
chage -d 0 assulai

# Expire password for user 'assulai1'
chage -d 0 assulai1

# Set password to never expire for user 'assulai1'
chage -E -1 assulai1

# Display password expiration information for user 'assulai1'
chage -l assulai1

# Display information about user 'assulai' from /etc/passwd
grep assulai /etc/passwd

# Modify user 'assulai1': move home directory to /home/assulai, set shell to /bin/bash, copy files from /etc/skel, and rename to 'assulai'
usermod -m -d /home/assulai -s /bin/bash -k /etc/skel -l assulai assulai1

# Modify user 'assulai1': move home directory to /home/assulai, set shell to /bin/bash, copy files from /etc/skel, and rename to 'assulai1'
usermod -m -d /home/assulai -s /bin/bash -k /etc/skel -l assulai1 assulai

# Modify user 'assulai1': move home directory to /home/assulai and rename to 'assulai'
usermod -m -d /home/assulai -l assulai1 assulai

# Modify user 'assulai': move home directory to /home/assulai and rename to 'assulai1'
usermod -m -d /home/assulai -l assulai assulai1

# Display information about user 'assulai' from /etc/passwd
grep assulai /etc/passwd

# Expire password for user 'assulai' on 2019-12-31
usermod -e 2019-12-31 assulai

# Display information about user 'assulai' from /etc/passwd
grep assulai /etc/passwd

# Display password expiration information for user 'assulai'
chage -l assulai
```
Here are the commands related to user and group management with added comments:


# Change shell for current user
chsh

# Exit the current session
exit

# Change finger information for current user
chfn

# Search for 'linux' in /etc/passwd
grep linux /etc/passwd

# Search for 'root' in /etc/passwd
grep root /etc/passwd

# Print real and effective user IDs
id

# Add user 'assulai' to group 'dba'
usermod -G dba assulai

# Change primary group of user 'assulai' to 'root'
usermod -G root assulai

# Add secondary group 'user1' to user 'assulai'
usermod -a -G user1 assulai

# Lock account for user 'user1'
usermod -L user1

# Unlock account for user 'user1'
usermod -U user1

# Switch to current user's home directory
su ~

# Switch to user 'assulai's home directory
su ~assulai

# Switch to user 'assulai1's home directory
su ~assulai1

# Switch to user 'user1's home directory
su ~user1

# Delete group 'dba1'
groupdel dba1

# Display non-comment lines from /etc/login.defs
grep -v ^# /etc/login.defs

# Display contents of /etc/bashrc
cat /etc/bashrc

# Display contents of /etc/profile
cat /etc/profile

# Display contents of /etc/profile.d/ directory
cat /etc/profile.d/*

# List files in /etc/profile.d/ directory
ls -l /etc/profile.d/

# Display contents of ~/.bashrc file (user's bash configuration)
cat ~/.bashrc

# Display contents of ~/.bash_profile file (user's bash profile)
cat ~/.bash_profile

# Display contents of ~/.bash_logout file (user's bash logout script)
cat ~/.bash_logout

# Create group 'linuxadm' with GID 5000
groupadd -g 5000 linuxadm

# Create group 'sale' with GID 5000 (overriding existing group)
groupadd -o -g 5000 sale

# Rename group 'sale' to 'mgmt'
groupmod -n mgmt sale

# Change GID of group 'linuxadm' to 6000
groupmod -g 6000 linuxadm

# Add user 'user1' to group 'linuxadm'
usermod -a -G linuxadm user1

# Add user 'user1' to group 'linuxadm' (alternative syntax)
usermod -a -G linuxadm user1

# Add user 'user1' to group 'mgmt'
gpasswd -a user1 mgmt

# Create user 'bghori' with UID 535, create home directory /home/bghori
useradd -u 535 -m -d /home/bghori bghori

# Delete user 'bghori' and remove home directory recursively
userdel -r bghori

# Search for user 'bghori' in /etc/passwd
grep bghori /etc/passwd

# Show listing of last logged in users
last

# Show listing of reboots
last reboot

# Display contents of /var/log/wtmp file using utmpdump
utmpdump /var/log/wtmp

# Display failed login attempts
faillog

# Display failed login attempts (alternative)
faillog 

# Display failed login attempts for user 'user1'
faillog -u user1

# Display users currently logged in
who

# Display last login times for all users
lastlog

# Create group 'sysadmin' with GID 1000
groupadd -g 1000 sysadmin

# Search for group 'sysadmin' in /etc/group
grep sysadmin /etc/group

# Create group 'dba' with GID 1001
groupadd -g 1001 dba

# Create group 'dba1' with GID 2000 and specify its name using -n
groupadd -g 2000 -n dba1 dba

# Rename group 'dba1' to 'dba' and change its GID to 2000
groupadd -g 2000 -n dba dba1

# Change GID of group 'dba1' to 2000 and rename it to 'dba'
groupmod -g 2000 -n dba1 dba

# Search for group 'dba' in /etc/group
grep dba /etc/group

# Add user 'user1' as the administrator of group 'dba1'
gpasswd -A user1 dba1

# Convert group file to shadow format (if applicable)
grpconv

# Add user 'user1' as the administrator of group 'dba1' (alternative syntax)
gpasswd -A user1 dba1

# Add user 'user2' to group 'dba1'
gpasswd -a user2 dba1

# Remove user 'user2' from group 'dba1'
gpasswd -d user2 dba1

# Set members of group 'dba1' to 'user1, assulai, linuxcbt'
gpasswd -M user1,assulai,linuxcbt dba1

# Change the password for group 'dba1'
gpasswd dba1

# Remove the password from group 'dba1'
gpasswd -r dba1

# Switch to a new group 'dba1'
newgrp dba1
```
Here are the commands related to disk partitioning, swap partitioning, and logical volume management (LVM), with added comments for clarity:


# Display partitions of all disks
fdisk -l

# Partition /dev/sdb
fdisk /dev/sdb
# Enter the following interactive commands:
n        # Create a new partition
1        # Partition number
p        # Primary partition
        # Press Enter to accept default start sector
+1G      # Allocate 1GB space for the partition
p        # Print partition table to verify
w        # Write changes to disk and exit

# Update partition table
partprobe

# Create directory for mounting
mkdir /sdb1

# Format partition /dev/sdb1 with ext3 filesystem
mkfs.ext3 -j /dev/sdb1

# Mount /dev/sdb1 to /sdb1
mount -t ext3 /dev/sdb1 /sdb1

# Mount all filesystems listed in /etc/fstab
mount -a

# Display currently mounted filesystems
mount

### Delete partitions ###

# Unmount /dev/sdb1 and /sdb1
umount /dev/sdb1 /sdb1

# Remount filesystems listed in /etc/fstab
mount -a

# Display currently mounted filesystems
mount

# Partition /dev/sdb to create swap partition
fdisk /dev/sdb
# Enter the following interactive commands:
d        # Delete partition
1        # Partition number to delete
p        # Print partition table to verify deletion
w        # Write changes to disk and exit

# Display currently mounted filesystems
mount

### Provision swap partitions ###

# Partition /dev/sda to create swap partition
fdisk /dev/sda
# Enter the following interactive commands:
n        # Create a new partition
p        # Primary partition
4        # Partition number
t        # Change partition type
4        # Partition number
82       # Linux swap
p        # Print partition table to verify
w        # Write changes to disk and exit

# Update partition table
partprobe

# Format /dev/sda4 as swap
mkswap /dev/sda4

# Display swap usage summary
swapon -s

# Display help information for fdisk
fdisk -h

# Display partitions of all disks
fdisk -l

# Activate swap partition /dev/sda4
swapon -v /dev/sda4

# Deactivate swap partition /dev/sda4
swapoff /dev/sda4

# Create a 1GB swap file /swapfile1G filled with zeros
dd if=/dev/zero of=/swapfile1G bs=1024 count=1048576

# Format /swapfile1G as swap
mkswap /swapfile1G

# Activate swap file /swapfile1G
swapon -v /swapfile1G

### Logical Volume Management ###

# Partition /dev/sdb for LVM
fdisk /dev/sdb
# Enter the following interactive commands:
n        # Create a new partition
p        # Primary partition
        # Press Enter to accept default start sector
+1G      # Allocate 1GB space for the partition
t        # Change partition type
82e      # Set partition type to Linux swap (LVM)
p        # Print partition table to verify
w        # Write changes to disk and exit

# Update partition table
partprobe

# Create physical volumes (PVs) on /dev/sdb1 and /dev/sdb2
pvcreate /dev/sdb1 /dev/sdb2

# Display physical volume information
pvdisplay

# Create volume group (VG) 'volgroupvar' using /dev/sdb1 and /dev/sdb2
vgcreate volgroupvar /dev/sdb1 /dev/sdb2

# Display volume group information including logical volumes (LVs)
vgdisplay -v

# Create logical volume (LV) 'logvolvar' of size 3GB in volume group 'volgroupvar'
lvcreate -L 3GB -n logvolvar volgroupvar

# Create logical volume (LV) 'logvolvar' with size specified in extents (alternative syntax)
lvcreate -l 3GB -n logvolvar volgroupvar

# Create directory for mounting LV
mkdir /lvmvar1

# Format logical volume /dev/volgroupvar/logvolvar with ext3 filesystem
mkfs.ext3 -j /dev/volgroupvar/logvolvar

# Mount logical volume /dev/volgroupvar/logvolvar to /lvmvar1
mount /dev/volgroupvar/logvolvar /lvmvar1

# Mount all filesystems listed in /etc/fstab
mount -a

# Display currently mounted filesystems
mount

# Resize logical volume /dev/volgroupvar/logvolvar to 1GB
lvresize -L 1GB /dev/volgroupvar/logvolvar

# Rename logical volume 'logvolvar' to 'logvolopt' in volume group 'volgroupvar'
lvrename volgroupvar logvolvar logvolopt

# Rename volume group 'volgroupvar' to 'volgroupopt'
vgrename volgroupvar volgroupopt
```

### RAID ###


# Partition /dev/sdc
fdisk /dev/sdc
# Enter the following interactive commands:
n        # Create a new partition
e        # Extended partition type
1        # Partition number
n        # Create a new logical partition
l        # Logical partition type
        # Press Enter to accept default start sector
+1G      # Allocate 1GB space for the partition
p        # Print partition table to verify
w        # Write changes to disk and exit

# Update partition table
partprobe

# Create RAID 0 (striping) array /dev/md0 with 2 devices (/dev/sdc5, /dev/sdc6)
mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdc5 /dev/sdc6

# Format /dev/md0 with ext3 filesystem
mkfs.ext3 /dev/md0

# Create mount point for /dev/md0
mkdir /md0

# Mount /dev/md0 to /md0
mount /dev/md0 /md0

# Mount all filesystems listed in /etc/fstab
mount -a

# Append sequence of numbers to file /md- and list files in /md0 directory
seq 1000000 >> /md- && ls –l /md0

# Display partitions of all disks
fdisk -l

# Create RAID 1 (mirroring) array /dev/md1 with 2 devices (/dev/sdb6, /dev/sdc6)
mdadm --create /dev/md1 --level=1 --raid-devices=2 /dev/sdb6 /dev/sdc6

# Format /dev/md1 with ext3 filesystem (correcting the command syntax)
mkfs.ext3 /dev/md1

# Create mount point for /dev/md1
mkdir /md1

# Mount /dev/md1 to /md1
mount /dev/md1 /md1

# Mount all filesystems listed in /etc/fstab
mount -a

# Append sequence of numbers to /md1 file and list files in /md1 directory
seq 1000000 >> /md1 && ls –l /md1

# Display partitions of all disks
fdisk -l

# Create RAID 5 array /dev/md5 with 4 devices (/dev/sdb7, /dev/sdb8, /dev/sdc7, /dev/sdc8)
mdadm --create /dev/md5 --level=5 --raid-devices=4 /dev/sdb7 /dev/sdb8 /dev/sdc7 /dev/sdc8

# Format /dev/md5 with ext3 filesystem (correcting the command syntax)
mkfs.ext3 /dev/md5

# Create mount point for /dev/md5
mkdir /md5

# Mount /dev/md5 to /md5 and mount all filesystems listed in /etc/fstab
mount /dev/md5 /md5 && mount –a

# Append sequence of numbers to /md5 file and list files in /md5 directory
seq 1000000 >> /md5 && ls –l /md5

# Display partitions of all disks
fdisk -l
```

### Access Control List (ACL) ###


# Display ACL of file1
getfacl file1

# Create file1
touch file1

# Display ACL of file1
getfacl file1

# Partition /dev/sdb
fdisk /dev/sdb

# Update partition table
partprobe

# Format /dev/sdb9 with ext3 filesystem
mkfs.ext3 /dev/sdb9

# Create directory /home
mkdir /home

# Mount /dev/sdb9 to /home with ext3 filesystem
mount /dev/sb9 /home

# Remount /dev/sdb9 to /home with ext3 filesystem
mount -t ext3 /dev/sb9 /home

# Remount /dev/sdb9 to /home with ext3 filesystem enabling ACL
mount -o remount,acl /home

# Enable ACL on /dev/sdb9
tune2fs /dev/sdb9 -o acl

# Set ACL for user2 on file1
setfacl -m u:user2:7 file1

# Display ACL of file1
getfacl file1

# Set ACL for linuxcbt on /home
setfacl -m u:linuxcbt:7 /home

# Display ACL of /home
getfacl /home

# Set ACL for user1 on /home with read and write permissions
setfacl -m u:user1:rw /home

# Display ACL of /home
getfacl /home/

# Remove ACL entry for user1 on /home
setfacl -x u:user1 /home

# Display ACL of /home
getfacl /home

# Remove all ACL entries from file1
setfacl -b file1

# Display ACL of file1
getfacl file1

# Set complex ACL on /home with default permissions
setfacl -m u::rwx,g::6,u:linuxcbt:7,g:user2:7,o:4 /home

# Display ACL of /home
getfacl /home/

# List files in current directory
ls

# Set default ACL for user1 and user2 on /home/lost+found/
setfacl -m d:u:user1:6,d:user2:4 /home/lost+found/

# Display ACL of /home/lost+found/
getfacl /home/lost+found/

# Remove default ACL entries from /home/
setfacl -m d:u:user1:6,d:user2:7,d:g:linuxcbt:6,d:g:user2:4,d:o:6 /home/

# Display ACL of /home/
getfacl /home/
```
It seems like you've provided a detailed set of commands for configuring disk quotas, but some parts of the instructions are a bit unclear or contain syntax errors. Let's correct and clarify them step by step:

### Disk Quota Configuration ###

1. **Partition and Format Disk:**
   
   
   # Partition /dev/sdc
   fdisk /dev/sdc
   # Enter the following interactive commands:
   n        # Create a new partition
   p        # Primary partition type
   1        # Partition number
   (press Enter to accept default values for start and end sectors)
   p        # Print partition table to verify
   w        # Write changes to disk and exit

   # Update partition table
   partprobe

   # Format /dev/sdb1 with ext4 filesystem
   mkfs.ext4 /dev/sdb1
   ```

2. **Create Mount Point and Mount Partition:**
   
   
   # Create mount point for /dev/sdb1
   mkdir /rhcelab

   # Mount /dev/sdb1 to /rhcelab
   mount /dev/sdb1 /rhcelab
   ```

3. **User and Group Setup:**

   Assuming you've already added users `a`, `b`, `c`, `d`, `linuxcbt`, and `assulai` to the system with their respective passwords.

4. **Edit /etc/fstab to Enable Quotas:**
   
   Edit `/etc/fstab` to include quota options for `/rhcelab`:

   
   vi /etc/fstab
   # Add or modify the entry for /rhcelab to include usrquota and grpquota options:
   /dev/sdb1   /rhcelab   ext4   defaults,usrquota,grpquota   1 2
   ```

   Or remount `/rhcelab` to enable quotas:

   
   mount -o remount,acl,usrquota,grpquota /rhcelab
   ```

5. **Initialize Quota Database:**
   
   
   # Check and initialize the quota database for /rhcelab
   quotacheck -cgu /rhcelab
   ```

6. **Set User Quotas:**
   
   
   # Set quotas for user 'a'
   edquota -u a

   # Example of setting quotas using setquota:
   setquota -u a 100000 200000 0 0 /rhcelab

   # Set quotas for user 'b'
   edquota -u b
   setquota -u b 200000 200000 0 0 /rhcelab
   ```

7. **Set Group Quotas:**
   
   
   # Set quotas for group 'quotatest'
   edquota -g quotatest

   # Example of setting quotas using setquota for group:
   setquota -g quotatest 1000000 1500000 0 0 /rhcelab
   ```

8. **Adjust Time-Based Quotas:**
   
   Time-based quotas can be set using the `-T` flag with `edquota` for users and groups.

9. **Manage Quotas and Usage:**
   
   
   # Enable quotas on /rhcelab
   quotaon -ugv /rhcelab

   # Check quotas for user 'a'
   quota a

   # Check quotas for user 'b'
   quota b

   # Check quotas for group 'quotatest'
   quota -g quotatest

   # Display quota usage for all users and groups
   repquota -a

   # Create directories under /rhcelab for users and groups
   mkdir /rhcelab/user-a /rhcelab/user-b /rhcelab/group-quotatest

   # Set ownership and permissions for directories
   chown -R a:a /rhcelab/user-a
   chown -R b:b /rhcelab/user-b
   chgrp -R quotatest /rhcelab/group-quotatest
   
Let's continue from where we left off with configuring and testing disk quotas for users and groups on your system.

### Continuing Disk Quota Configuration and Testing ###

1. **List Contents of `/rhcelab`:**

   After setting up the directories and files, let's list the contents to ensure everything is in place.

   
   ls -l /rhcelab
   ```

2. **User `a` Operations:**

   Switch to user `a`, create directories, and create files to test disk quota limits.

   
   su a
   cd /rhcelab
   mkdir d1 d2 d3 d4 d6
   touch f5 f1 f2 f4
   ```

3. **Exceed Disk Quota with File Creation:**

   Attempt to create a file (`f6`) that exceeds the allocated quota for user `a`. This will simulate a scenario where the disk quota is exceeded.

   
   touch f6
   # You mentioned an error message here, which indicates the disk quota exceeded.
   ```

4. **Check Disk Usage (`du`) and Quota (`quota`) for User `a`:**

   Before and after attempting to exceed the quota, check the disk usage and quota status for user `a`.

   
   du -h *
   # This will show the disk usage of files and directories in human-readable format.

   # Check quota for user 'a'
   quota a
   ```

5. **Switch Users and Perform Operations:**

   Exit from user `a` and switch users to perform further operations and check quotas.

   
   exit  # Exit from user 'a'
   
   # Switch users to perform more operations
   su a
   cd /rhcelab/user-a
   date
   exit
   ```

6. **Final Quota Check for User `a`:**

   After performing operations and potentially removing files to free up space, check the quota status again for user `a`.

   
   su a
   exit  # Exit from user 'a'
   
   # Check quota for user 'a' again
   quota a
   ```

7. **Configure Group Quota (`quotatest`):**

   Configure and test group quotas (`quotatest`) by assigning permissions and performing operations that exceed the group quota.

   
   # Check group 'quotatest' and user IDs for 'c' and 'd'
   grep quotatest /etc/group
   id c
   id d

   # Set permissions on /rhcelab/group-quotatest directory
   chmod -R 770 /rhcelab/group-quotatest
   ls -l /rhcelab

   # Create test files for group 'quotatest'
   touch /rhcelab/test_{1..80}.txt

   # Switch to user 'c' and 'd' to perform operations
   su c
   cd /rhcelab/group-quotatest
   dd if=/dev/zero of=c-file-1 count=80 bs=1M
   exit
   
   su d
   cd /rhcelab/group-quotatest
   dd if=/dev/zero of=d-file-1 count=300 bs=1M
   ls
   exit

   # Check quota usage for group 'quotatest'
   quota -g quotatest
   ```
It looks like you're working on configuring and testing cron jobs on your Linux system. Let's continue from where you left off and ensure everything is set up correctly.

### Continuing Cron Configuration and Testing ###

1. **Check Cron Service and Packages:**

   First, ensure the cron service is running and check related packages.

   
   ps -ef | grep cron   # Check if cron service is running
   rpm -qa | grep cron  # Check installed cron packages
   ```

2. **Inspect Cronie Package:**

   Verify the installation directory and configuration files for `cronie`.

   
   rpm -ql cronie   # List files installed by cronie package
   rpm -qlc cronie  # List configuration files for cronie
   ```

3. **Check Cron Service Status:**

   Verify the status of the cron daemon (`crond`).

   
   ls -l /etc/init.d/crond   # Check cron daemon init script
   service crond status      # Check current status of cron service
   ```

4. **Edit System-wide Crontab (`/etc/crontab`):**

   Edit the system-wide crontab to schedule jobs for `linuxcbt`.

   
   vi /etc/crontab
   ```

   Add the following lines to schedule jobs every 1 minute and every 2 minutes respectively:

   ```plaintext
   */1 * * * * linuxcbt /usr/bin/uptime >> /home/linuxcbt/uptime.stat
   */2 * * * * linuxcbt du -chs >> /home/linuxcbt/du.stat
   ```

5. **Verify and Review Cron Jobs:**

   After setting up the crontab entries, verify the setup and review the logs.

   
   date   # Check current date/time
   
   # Check status of crontab file
   stat /etc/crontab
   
   # Check files created by cron jobs
   ls -l ~linuxcbt/
   ```

6. **Check Output Files of Cron Jobs:**

   Ensure the output files of the cron jobs are created and populated.

   
   cat ~linuxcbt/uptime.stat   # Check uptime statistics
   cat ~linuxcbt/du.stat        # Check disk usage statistics
   ```

7. **Configure User-specific Cron Jobs:**

   Edit the crontab for user `linuxcbt` to schedule additional tasks.

   
   crontab -e -u linuxcbt
   ```

   Add the following cron job to the user's crontab:

   ```plaintext
   */2 * * * * df -h >> /home/linuxcbt/df.stat
   ```

8. **Review and Monitor Cron Job Execution:**

   Review the output files and monitor the execution of cron jobs to ensure they are running as expected.

   
   ls -l /var/spool/cron/   # List cron job files for monitoring
   
   # Check specific cron job outputs
   cat ~linuxcbt/uptime.linuxcbt.stat
   cat ~linuxcbt/df.stat
   ```

9. **Configure Access Control for Cron:**

   Manage access control for cron jobs using `cron.allow` and `cron.deny` files.

   
   ls -l /etc/cron.deny    # List cron deny file
   
   # Edit cron.allow or cron.deny as necessary
   vi /etc/cron.allow
   
   # Add user1 to cron.deny
   echo "user1" >> /etc/cron.deny
   ```

10. **Verify Access Control Configuration:**

    Ensure access control changes are applied correctly.

    
    id user1     # Verify user1's UID and GID
    grep user1 /etc/passwd   # Ensure user1 exists in passwd file
   
    # Switch to user1 and edit crontab
    su user1
    crontab -e    # Edit user1's crontab as needed
    ```

11. **Review and Clean Up:**

    After configuring and testing cron jobs, review logs and output files to ensure everything is functioning properly.

    
    # Review output files and logs
    ls -l cron.d*
    
    # Clean up cron.allow if necessary
    rm -rf /etc/cron.allow
    ```
It seems like you want to add `user1` to the `cron.deny` file and verify the status of this file. Here's how you can proceed:

### Adding `user1` to `cron.deny` and Verifying

1. **Add `user1` to `cron.deny`:**

   To restrict `user1` from using cron, you add `user1` to the `cron.deny` file.

   
   echo "user1" >> /etc/cron.deny
   ```

   This command appends `user1` to the `cron.deny` file, effectively denying `user1` from using cron jobs.

2. **Verify the `cron.deny` File:**

   After adding `user1` to `cron.deny`, you can check the contents and verify if `user1` is listed.

   
   cat /etc/cron.deny    # Check the contents of cron.deny
   ```

   Ensure that `user1` is listed in the `cron.deny` file.

### Verifying the Status

After adding `user1` to `cron.deny`, you may want to verify its status using `stat`:


stat /etc/cron.deny
```

This command will display detailed information about the `cron.deny` file, including access permissions, modification times, etc.

It seems like you want to perform various operations related to `anacron` and `at jobs`. Let's go through each section step-by-step.

### Anacron

1. **Checking `anacrontab` and `cron.daily` directory:**

   
   ls -l /etc/anacrontab      # Check the anacrontab file
   cat /etc/anacrontab         # View the contents of anacrontab
   ls -l /etc/cron.daily/     # Check contents of cron.daily directory
   cat /etc/crontab           # View the contents of crontab
   cat /etc/cron.d/0hourly    # View the contents of 0hourly in cron.d
   rpm -qa | grep -i anacron  # Check if anacron is installed
   rpm -ql anacron            # List files installed by anacron package
   ls -l /var/spool/anacron/  # Check the spool directory for anacron jobs
   ```

   Ensure to review the output of each command to understand the configuration and status of `anacron` and related cron jobs.

### at jobs

2. **Managing `at` jobs:**

   
   rpm -ql at            # List files installed by the 'at' package
   ps -ef | grep atd     # Check if atd (at daemon) is running
   date                  # Check the current date and time
   at 09:16              # Schedule a job to run at 09:16
   ps -ef >> /root/ps.dump  # Append the process list to a file
   atq                   # List the current at jobs
   date                  # Check the current date and time again
   atq                   # List the current at jobs
   ls -ltr ~             # List files in the home directory in reverse time order
   less /root/ps.dump    # View the contents of the ps.dump file
   date                  # Check the current date and time
   at 09:19              # Schedule another job to run at 09:19
   ps -aux >> /root/ps.dump1  # Append process list to another file
   atq                   # List the current at jobs
   cat ~/ps.dump1        # View the contents of ps.dump1 file
   atrm 1                # Remove the at job with ID 1
   cd                    # Change directory to user's home directory
   vi at.job.1           # Edit a script or command to be executed by 'at'
   ps -ef >> /root/ps.dump.2  # Append process list to another file
   df -h >> /root/df.dump  # Append disk usage information to a file
   at -f at.job.1 09:24   # Execute the at job at 09:24 using the content of at.job.1
   chmod 777 at.job.1     # Modify permissions of at.job.1 (note: be cautious with 777 permissions)
   at -f at.job.1 09:25   # Execute the at job at 09:25 using the content of at.job.1
   vi at.job.1           # Edit at.job.1 again if needed
   at -f at.job.1 09:27   # Execute the at job at 09:27 using the updated content of at.job.1
   ls -l at.job.1         # List details of at.job.1
   chown linuxcbt:root at.job.1  # Change ownership of at.job.1
   at -f at.job.1 09:27   # Execute the at job again at 09:27 with updated content
   cd /etc/               # Change directory to /etc/
   cd ~linuxcbt/          # Change directory to linuxcbt's home directory
   ls                     # List contents of the current directory
   cat df.stat            # View the contents of df.stat file
   clear                  # Clear the terminal screen
   atq                    # List current at jobs again
   batch                  # Start an at job in batch mode
   ps –chs >> /root/ps.dump.batch  # Append process list to another file
   uptime >> /root/uptime.stat  # Append uptime information to a file
   date >> /root/bash.date # Append current date to a file
   Ctrl+d                 # Exit the batch command (or use exit command)
   ```

   These commands help you manage `at` jobs, schedule tasks, view and manipulate job queues, and examine output files.
It seems there are some misunderstandings or typos in your commands related to `at` and `batch` jobs. Let's correct and clarify the commands you mentioned:

### Commands and Clarifications

1. **Check current date and time:**

   
   date
   ```

   This command simply prints the current date and time.

2. **List current `at` jobs:**

   
   atq
   ```

   This command lists all the current `at` jobs in the queue.

3. **View contents of `bash.date` file in home directory:**

   
   cat ~/bash.date
   ```

   This will display the contents of the `bash.date` file located in the user's home directory.

4. **View contents of `ps.dump.batch` file in home directory:**

   
   cat ~/ps.dump.batch
   ```

   This command will display the contents of the `ps.dump.batch` file located in the user's home directory.

5. **Check disk usage with summary:**

   
   du -chs
   ```

   This command shows the total disk usage summary of the current directory.

6. **Check disk usage with human-readable sizes:**

   
   du -ch
   ```

   This command lists the disk usage of files and directories in the current directory in a human-readable format.

7. **Verify location and details of `at` and `batch` commands:**

   
   ls -l /usr/bin/at
   ls -l /usr/bin/batch
   ```

   These commands check the details and permissions of the `at` and `batch` commands in `/usr/bin`.

8. **Inspect file information for `batch` command:**

   
   file /usr/bin/batch
   ```

   This command provides detailed information about the file type and attributes of `/usr/bin/batch`.

9. **View contents of `batch` command:**

   
   cat /usr/bin/batch
   ```

   This command displays the contents of the `batch` command executable file.

10. **Schedule an `at` job to run now + 1 day:**

    
    at now + 1 day
    ```

    This command opens an interactive prompt where you can enter commands to be executed one day from now.
Setting up remote system logging involves configuring `rsyslog` to send log messages from one system to another. Here’s how you can set it up step by step:

### Configuring the Logging Server (Receiving End)

1. **SSH into the logging server:**

   
   ssh 192.168.75.20
   ```

2. **Edit `rsyslog` configuration file:**

   
   vi /etc/rsyslog.conf
   ```

3. **Enable UDP listener for `rsyslog`:**

   Add or uncomment the following lines in `rsyslog.conf` to enable UDP listener on port 514:

   
   $ModLoad imudp.so
   $UDPServerRun 514
   ```

4. **Open firewall port for UDP 514:**

   
   firewall-cmd --permanent --add-port=514/udp
   firewall-cmd --reload
   ```

   This command allows incoming UDP traffic on port 514, which is used by `rsyslog` for receiving log messages.

5. **Start and enable `rsyslog` service:**

   
   systemctl start rsyslog.service
   systemctl enable rsyslog.service
   ```

   Ensure that `rsyslog` is running and set to start automatically on system boot.

### Configuring the Client (Sending End)

1. **Edit `rsyslog` configuration file on the client:**

   
   vi /etc/rsyslog.conf
   ```

2. **Forward all log messages to the logging server:**

   Add the following line at the end of `rsyslog.conf` on the client to forward all log messages to the logging server (`192.168.75.20`) via UDP port 514:

   
   *.* @192.168.75.20:514
   ```

   - `*.*` indicates all facilities and priorities. Adjust this as needed based on your logging requirements.

3. **Restart `rsyslog` service on the client:**

   
   systemctl restart rsyslog.service
   ```

4. **Open firewall port for UDP 514 (if not already open):**

   
   firewall-cmd --permanent --add-port=514/udp
   firewall-cmd --reload
   ```

5. **Verify the UDP port configuration:**

   
   firewall-cmd --list-ports
   ```

   Ensure that port 514/udp is listed to confirm that the firewall rule is applied correctly.

6. **Send a test log message from the client:**

   
   logger -i "This is a test log message from the client"
   ```

7. **Check the logs on the logging server:**

   SSH back into the logging server:

   
   ssh 192.168.75.20
   ```

   View the incoming log messages in `/var/log/messages` or the appropriate log file based on your `rsyslog` configuration:

   
   tail -f /var/log/messages
   ```

   This command allows you to monitor incoming log messages in real-time.

### Notes:

- **rsyslog Configuration**: Make sure you configure `rsyslog` correctly on both the client and the server to ensure proper log forwarding.
- **Firewall**: Adjust firewall rules (`firewall-cmd`) as necessary to allow UDP traffic on port 514.
- **Testing**: Use `logger` command on the client to send test log messages and verify their reception on the logging server.

Setting up VSFTPD involves several steps to ensure that the FTP server is installed, configured, and accessible. Here's a detailed guide based on your requirements:

### Installation and Basic Configuration of VSFTPD

1. **Install VSFTPD and FTP Client:**

   
   yum install vsftpd -y
   yum install ftp -y
   ```

2. **Verify VSFTPD Installation:**

   
   rpm -qa vsftpd
   ```

3. **Check VSFTPD Package Files:**

   
   rpm -ql vsftpd
   ```

4. **Review Log Rotation for VSFTPD:**

   
   less /etc/logrotate.d/vsftpd
   ```

   This file specifies how logs for VSFTPD are rotated.

5. **Review Global Log Rotation Configuration:**

   
   less /etc/logrotate.conf
   ```

   Ensure log rotation settings are appropriate for your environment.

6. **Review PAM Configuration for VSFTPD:**

   
   less /etc/pam.d/vsftpd
   ```

   PAM (Pluggable Authentication Modules) configuration defines authentication rules for VSFTPD.

7. **Check VSFTPD Service Status:**

   
   systemctl status vsftpd.service
   ```

8. **Enable VSFTPD to Start on Boot:**

   
   systemctl enable vsftpd.service
   ```

9. **Verify VSFTPD Init Script:**

   
   ls -ltr /etc/init.d/vsftpd
   ```

10. **Check Runlevel Symbolic Links for VSFTPD:**

    
    ls -ltr /etc/rc3.d/*vsftpd
    ```

    This shows which runlevel scripts start VSFTPD.

11. **Start VSFTPD Service:**

    
    systemctl start vsftpd.service
    ```

12. **Check Listening Ports:**

    
    netstat -ntlp | grep vsftpd
    ```

    Ensure that VSFTPD is listening on ports 20 and 21.

13. **Configure Firewall (Firewalld) for FTP (Ports 20-21):**

    
    firewall-cmd --permanent --add-port=20-21/tcp
    firewall-cmd --reload
    ```

    Alternatively, for older systems using `iptables`:

    
    iptables -I INPUT -m tcp -p tcp --dport 21 -j ACCEPT
    service iptables save && service iptables restart
    ```

14. **Navigate to VSFTPD Configuration Directory:**

    
    cd /etc/vsftpd/
    ```

15. **Review and Modify VSFTPD Configuration (`vsftpd.conf`):**

    
    vi vsftpd.conf
    ```

    Adjust the configuration as needed. Example settings might include:

    ```conf
    anonymous_enable=NO
    local_enable=YES
    write_enable=YES
    chroot_local_user=YES
    ```

    Save and exit the editor (`vi`).

16. **Restart VSFTPD Service to Apply Changes:**

    
    systemctl restart vsftpd.service
    ```

17. **Test FTP Connectivity:**

    
    ftp localhost
    ```

    Use FTP commands (`ls`, `cd`, `put`, `get`, etc.) to verify functionality.

18. **Verify FTP Directory:**

    
    cd /var/ftp/
    ls -l
    ```

    Ensure permissions and contents are appropriate.

19. **Upload a Test File:**

    
    cd pub/
    seq 10000 >> 100k.txt
    ls -l
    ```

    This command creates a 100KB file named `100k.txt` for testing purposes.

20. **Test FTP Access from Localhost:**

    
    ftp localhost
    ```

    Confirm that you can connect and perform operations on the FTP server.

### Additional Considerations:

- **Security**: Always consider security implications when configuring FTP services. Use strong passwords, consider enabling SSL/TLS (FTPS), and restrict access as needed.
- **Logging**: Monitor logs (`/var/log/messages`, VSFTPD logs) for any issues or unauthorized access attempts.
- **Firewall**: Adjust firewall rules (`firewalld` or `iptables`) to allow FTP traffic as required.

Sure, here's the script with comments added to explain each line:


### Vsftp server for specific user ###

# Check if VSFTPD package is installed
rpm -qa | grep vsftpd

# Check SELinux boolean settings related to FTP
getsebool -a | grep ftp

# Set SELinux booleans to allow specific FTP behaviors
setsebool -P allow_ftpd_anon_write on   # Allow anonymous write access
setsebool -P allow_ftpd_use_cifs on    # Allow FTP to use CIFS
setsebool -P allow_ftpd_use_nfs on     # Allow FTP to use NFS
setsebool -P ftpd_connect_db on        # Allow FTP to connect to databases
setsebool -P httpd_enable_ftp_server on  # Allow HTTPD to enable FTP server
setsebool -P tftp_anon_write on        # Allow TFTP anonymous write

# Configure firewall to allow FTP ports 20 and 21 (passive and active mode)
firewall-cmd --permanent --add-port=20-21/tcp   # For firewalld
iptables -I INPUT -m tcp -p tcp --dport 20 -j ACCEPT  # For iptables
iptables -I INPUT -m tcp -p tcp --dport 21 -j ACCEPT  # For iptables

# Reload firewall settings to apply changes
firewall-cmd --reload    # For firewalld
service iptables save && service iptables restart   # For iptables

# Enable VSFTPD service to start on boot
systemctl enable vsftpd   # Modern systems use systemctl
chkconfig vsftpd on       # Older systems use chkconfig

# Check status of VSFTPD service
systemctl status vsftpd   # Modern systems use systemctl
service vsftpd status     # Older systems use service

# Append current vsftpd.conf configuration to vsmod.txt for reference
cat /etc/vsftpd/vsftpd.conf >> vsmod.txt

# Edit vsftpd.conf to configure FTP server settings
vi /etc/vsftpd/vsftpd.conf

# Within vi editor, configure vsftpd.conf with the following parameters:
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
dual_log_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
pam_service_name=vsftpd
userlist_enable=NO
tcp_wrappers=YES

# Save and exit vi editor (:wq for vi)

# Test FTP connection to localhost
ftp localhost

# Log in with the specified user credentials
# (Assuming "linuxcbt" is the username and "password" is the password)
linuxcbt
password

# Test basic FTP commands
pwd         # Print working directory
ls          # List directory contents
pwd         # Print working directory again
ls          # List directory contents again

# Upload a file using mput command (e.g., file1)
mput file1
y           # Confirm upload if prompted

# Check the uploaded file's permissions
ls -l file1
```

### Explanation:

1. **Check VSFTPD Package**: Verifies if VSFTPD (Very Secure FTP Daemon) is installed on the system.

2. **SELinux Booleans**: Sets SELinux booleans (`setsebool`) to enable specific permissions related to FTP services like anonymous write access, using CIFS, NFS, connecting to databases, enabling FTP server via HTTP, and allowing anonymous write access for TFTP.

3. **Firewall Configuration**: Opens TCP ports 20 (FTP data transfer) and 21 (FTP control connection) using `firewall-cmd` for `firewalld` or `iptables` for traditional firewall setups.

4. **Service Management**: Enables VSFTPD service to start automatically (`systemctl enable` or `chkconfig`) and checks its status (`systemctl status` or `service`).

5. **vsftpd.conf Configuration**: Modifies VSFTPD configuration (`/etc/vsftpd/vsftpd.conf`) to customize FTP server behavior. Parameters such as `anonymous_enable`, `local_enable`, `write_enable`, `local_umask`, `dual_log_enable`, and others control various aspects of FTP operations.

6. **FTP Testing**: Tests FTP connectivity locally (`ftp localhost`) and performs basic operations like listing files (`ls`), changing directory (`pwd`), and uploading a file (`mput`).

7. **File Permission Verification**: Checks the permission of an uploaded file (`ls -l`) to ensure proper access control.

Here's the script with comments added to explain each line:


### Vsftpd for anonymous access ###

# Check if VSFTPD package is installed
rpm -qa | grep vsftpd

# Edit vsftpd.conf to configure anonymous FTP settings
vi /etc/vsftpd/vsftpd.conf

# Configure vsftpd.conf for anonymous access with specific settings:
anonymous_enable=YES           # Allow anonymous login
local_enable=NO                # Disable local user login
write_enable=YES               # Enable write permissions
local_umask=022                # Set default umask for files
anon_upload_enable=YES         # Allow anonymous users to upload files
dirmessage_enable=YES          # Enable display of directory messages
dual_log_enable=YES            # Enable logging to xferlog and syslog
xferlog_enable=YES             # Enable transfer logging
connect_from_port_20=YES       # Use port 20 for active mode FTP
chown_uploads=YES              # Set ownership of uploaded files
chown_username=bin             # Set ownership to user "bin"
xferlog_std_format=YES         # Use standard xferlog format
listen=YES                     # Listen for incoming connections
pam_service_name=vsftpd        # PAM service name
userlist_enable=NO             # Disable userlist restrictions
tcp_wrappers=NO                # Disable TCP wrappers

# Check SELinux boolean settings related to FTP
getsebool -a | grep ftp

# Set SELinux boolean to allow anonymous FTP write access
setsebool -P allow_ftpd_anon_write on

# Set SELinux context for /var/ftp to allow public content read/write
chcon -Rvt public_content_rw_t /var/ftp

# List directory contents of /var/ftp with SELinux context information
ls -Z /var/ftp

# Add SELinux file context mapping for /var/ftp
semanage fcontext -a -t public_content_rw_t /var/ftp

# Configure firewall to allow FTP ports 20 and 21 (passive and active mode)
firewall-cmd --permanent --add-port=20-21/tcp   # For firewalld
iptables -I INPUT -p tcp -m tcp --dport 20 -j ACCEPT  # For iptables
iptables -I INPUT -p tcp -m tcp --dport 21 -j ACCEPT  # For iptables

# Reload firewall settings to apply changes
firewall-cmd --reload    # For firewalld
service iptables save && service iptables restart   # For iptables

# Restart VSFTPD service to apply configuration changes
systemctl restart vsftpd.service   # Modern systems use systemctl
service vsftpd restart             # Older systems use service

# Test FTP connection to localhost
ftp localhost

# Optionally, test FTP connection to another server using lftp
lftp 192.168.75.21 -u linuxcbt1     # Connect to server with specified username
lftp linuxcbtserv2                  # Connect to server with default anonymous login
```

### Explanation:

1. **Check VSFTPD Package**: Verifies if VSFTPD (Very Secure FTP Daemon) is installed on the system.

2. **Edit vsftpd.conf**: Opens the VSFTPD configuration file (`/etc/vsftpd/vsftpd.conf`) for editing to configure anonymous FTP settings.

3. **Configure vsftpd.conf**: Sets various parameters in `vsftpd.conf` to enable anonymous access, allow uploads, specify directory and logging settings, and configure ownership.

4. **SELinux Settings**: Checks SELinux booleans related to FTP and sets `allow_ftpd_anon_write` to allow anonymous write access. Also sets SELinux context (`public_content_rw_t`) for `/var/ftp`.

5. **Firewall Configuration**: Opens TCP ports 20 (FTP data transfer) and 21 (FTP control connection) using `firewall-cmd` for `firewalld` or `iptables` for traditional firewall setups.

6. **Service Management**: Restarts VSFTPD service (`systemctl restart` or `service restart`) to apply the configuration changes.

7. **FTP Testing**: Tests FTP connectivity locally (`ftp localhost`) and optionally connects to remote FTP servers using `lftp` with specified credentials.

Here's the script with comments explaining each line:


### SSH server ###

# Check if OpenSSH package is installed
rpm -qa | grep openssh

# Check the status of SSH service using chkconfig (old) or systemctl (new)
chkconfig --list sshd    # For older systems
systemctl start sshd.service   # Start SSH service using systemctl (modern)
service sshd start       # Start SSH service using service (alternative)
systemctl status sshd.service   # Check status of SSH service using systemctl (modern)
service sshd status      # Check status of SSH service using service (alternative)

# Connect to SSH server at 192.168.75.20
ssh 192.168.75.20


### Key-based and passwordless authentication ###

# Remove existing DSA key (optional step if key already exists)
rm -rf /root/.ssh/id_dsa

# Generate DSA key pair (you can choose another type like RSA or ED25519)
ssh-keygen -t dsa

# Display the private key
cat ~/.ssh/id_dsa

# Display the public key
cat ~/.ssh/id_dsa.pub 

# Set SELinux context for the user's home directory (optional step)
chcon -t user_home_dir_t /home/linuxcbt

# Copy public key to remote server linuxcbtserv1 for passwordless authentication
ssh-copy-id -i ~/.ssh/id_dsa.pub linuxcbtserv1

# Connect to linuxcbtserv1 using SSH (key-based authentication)
ssh linuxcbtserv1
```

### Explanation:

1. **Check OpenSSH Package**: Verifies if OpenSSH package (`openssh`) is installed on the system.

2. **Check SSH Service Status**: Uses `chkconfig` or `systemctl` to list the status of the SSH daemon (`sshd`). This command checks if SSH service is enabled and running.

3. **Start SSH Service**: Starts the SSH service using `systemctl` (modern approach) or `service` (alternative).

4. **SSH Connection**: Initiates an SSH connection to the server at IP address `192.168.75.20`. This assumes SSH service is running on that server.

5. **Remove Existing DSA Key**: Removes any existing DSA key from the `/root/.ssh/` directory. This step is optional if you're generating a new key.

6. **Generate DSA Key Pair**: Creates a new DSA key pair (`id_dsa` and `id_dsa.pub`) for key-based authentication.

7. **Display Keys**: Prints the contents of the private key (`~/.ssh/id_dsa`) and the corresponding public key (`~/.ssh/id_dsa.pub`). The private key should be kept secure and never shared.

8. **Set SELinux Context**: Optionally sets the SELinux context (`user_home_dir_t`) for the user's home directory (`/home/linuxcbt`). SELinux contexts may need adjustment depending on your system's security policy.

9. **Copy Public Key**: Uses `ssh-copy-id` to copy the public key (`~/.ssh/id_dsa.pub`) to the `authorized_keys` file on the remote server (`linuxcbtserv1`). This enables passwordless authentication for the user `linuxcbt` on `linuxcbtserv1`.

10. **SSH Connection (Key-based)**: Connects to `linuxcbtserv1` using SSH, leveraging the newly generated DSA key pair for authentication. This demonstrates successful key-based and passwordless authentication.

Here's the script with comments explaining each line for setting up an iSCSI disk:


### Check for iSCSI related packages ###
rpm -qa | grep iscsi

### Enable and start iscsid service ###
systemctl enable iscsid.service    # Enable iscsid service to start on boot
systemctl start iscsid.service     # Start iscsid service immediately
systemctl status iscsid.service    # Check status of iscsid service

### Discover iSCSI targets ###
iscsiadm -m discovery -t st -p 192.168.75.20    # Discover iSCSI targets on IP address 192.168.75.20
iscsiadm -m discovery -t st -p 192.168.75.21    # Discover iSCSI targets on IP address 192.168.75.21
iscsiadm -m discovery -t st -p linuxcbtserv1.linuxcbt.internal    # Discover iSCSI targets by hostname

### Display help for iscsiadm command ###
iscsiadm --help

############# Configuration on linuxcbtserv1 #############

### Create a new partition on /dev/sdb ###
fdisk -l | grep sd    # Check existing disks
fdisk /dev/sdb        # Start fdisk on /dev/sdb
n                     # Create a new partition
p                     # Primary partition
[press enter]         # Use default starting sector
+1G                   # Allocate 1GB size
t                     # Change partition type
82e                   # Change type to Linux swap / Solaris
p                     # Print partition table
w                     # Write changes and exit
partprobe             # Inform kernel of partition changes

### Prepare the partition for LVM ###
pvcreate /dev/sdb1    # Initialize /dev/sdb1 as a physical volume for LVM
vgcreate vg_iscsi /dev/sdb1    # Create a volume group named vg_iscsi using /dev/sdb1
lvcreate -l 100%FREE -n lv_iscsi vg_iscsi    # Create a logical volume lv_iscsi using all available space in vg_iscsi

### Install targetcli and configure iSCSI target ###
yum install targetcli -y    # Install targetcli package
targetcli                   # Start targetcli command-line interface
cd backstores               # Navigate to backstores configuration
create scsi_disk1_server /dev/vg_iscsi/lv_iscsi    # Create iSCSI disk using the logical volume lv_iscsi

cd /iscsi                   # Navigate to iSCSI configuration
create iqn.2016-02.local.itzgeek.server:disk1    # Create iSCSI Qualified Name (IQN)
cd /iscsi/iqn.2016-02.local.itzgeek.server:disk1/tpg1/acls
create iqn.2016-02.local.itzgeek.server:node1node2    # Create iSCSI access control list (ACL)

cd /iscsi/iqn.2016-02.local.itzgeek.server:disk1/tpg1/luns
cd /                        # Navigate to root directory
ls                         # List contents (optional)
saveconfig                 # Save configuration changes
exit                       # Exit targetcli

### Enable and restart target service ###
systemctl enable target.service    # Enable target service to start on boot
systemctl restart target.service   # Restart target service immediately

### Configure firewall to allow iSCSI traffic ###
firewall-cmd --permanent --add-port=3260/tcp    # Open TCP port 3260 for iSCSI traffic
firewall-cmd --reload                           # Reload firewall rules

########## Configuration on linuxcbtserv2 as iSCSI client ###########

### Install iscsi-initiator-utils package ###
yum install iscsi-initiator-utils -y    # Install iSCSI initiator utils package

### Configure initiator name in initiatorname.iscsi file ###
vi /etc/iscsi/initiatorname.iscsi
# Set InitiatorName=iqn.2016-02.local.itzgeek.server:node1node2
InitiatorName=iqn.2016-02.local.itzgeek.server:node1node2    # Set iSCSI initiator name

### Discover iSCSI targets on the iSCSI server ###
iscsiadm -m discovery -t st -p 192.168.75.20    # Discover iSCSI targets on IP address 192.168.75.20

### Restart iscsid.service to apply changes ###
systemctl restart iscsid.service    # Restart iscsid.service

### Enable iscsid.service to start on boot ###
systemctl enable iscsid.service    # Enable iscsid.service to start on boot

### Log into the iSCSI target ###
iscsiadm -m node -T iqn.2016-02.local.itzgeek.server:disk1 -p 192.168.75.20 -l    # Log into the iSCSI target

### Check system logs for any iSCSI related messages ###
cat /var/log/messages

### Verify newly added disk partitions ###
cat /proc/partitions

### Create filesystem (XFS) on /dev/sdb ###
mkfs.xfs /dev/sdb    # Create XFS filesystem on /dev/sdb

### Mount the iSCSI disk ###
mount /dev/sdb /mnt    # Mount /dev/sdb to /mnt

### Check mounted filesystem ###
df -hT    # Display disk space usage

### Get UUID of /dev/sdb for /etc/fstab entry ###
blkid /dev/sdb

### Add /etc/fstab entry for persistent mount ###
vi /etc/fstab
# Add line: UUID=<UUID from blkid> /mnt xfs _netdev 0 0

### Unmount /mnt to prepare for iSCSI target logout ###
umount /mnt

### Logout of the iSCSI target ###
iscsiadm -m node -T iqn.----:disk1 -p 192.168.75.20 -u    # Logout from the iSCSI target
```
Here are the commands with comments added:

### LFTP


### Check if lftp package is installed using full path ###
rpm -qa 'which lftp'

### Check if lftp package is installed using grep ###
rpm -qa | grep lftp

### List files installed by lftp ###
rpm -ql lftp

### Connect to localhost using lftp ###
lftp localhost

### Check lftp version on localhost ###
lftp -v localhost

### Connect to localhost again with lftp ###
lftp localhost

### List files in long listing format ###
ls -ltr

### Create a directory named 'temp' ###
mkdir temp

### Copy files starting with 'cl' to 'temp' directory ###
cp -iv cl* temp

### List files in 'temp' directory ###
ls -l temp

### Edit vsftpd configuration file (open for editing) ###
vi /etc/vsftpd/vsftpd.conf 

### Edit vsftpd configuration file (open for editing) ###
vi /etc/vsftpd/vsftpd.conf 
# Modify configurations such as use_localtime=yes, local_max_rate=1000

### Restart vsftpd service ###
service vsftpd restart

### SSH to another server ###
ssh 192.168.75.20
```

### Rsync Usage


### Check if rsync package is installed ###
rpm -qa | grep rsync

### List files installed by rsync ###
rpm -ql rsync

### List configuration files installed by rsync ###
rpm -qlc rsync

### Display contents of rsync configuration file ###
cat /etc/xinetd.d/rsync

### List files in current directory ###
ls -l

### Transfer 'temp' directory recursively to 'linuxcbtserv2' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:linuxcbtserv2

### List files in long listing format with human-readable sizes ###
ls -ltrh

### Change directory to 'temp' inside 'linuxcbt1' ###
cd linuxcbt1/temp

### List files in current directory ###
ls -l

### Transfer 'temp' directory recursively to '/home/linuxcbt1/Desktop/' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:/home/linuxcbt1/Desktop/

### Change directory back to the parent directory ###
cd ..

### Transfer 'temp' directory recursively to '/' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:/

### List files in current directory ###
ls -l

### Check disk usage of 'temp' directory ###
du -chs temp/

### Change directory to 'temp' ###
cd temp/

### List files in current directory ###
ls 

### List files with long listing format and human-readable sizes ###
ls -lh 

### Check disk usage of current directory ###
du -chs

### Go back to the parent directory ###
cd ..

### Transfer 'temp' directory recursively to '/' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:/

### Append data to file '1million.txt' in 'temp' directory ###
seq 650000 >> temp/1million.txt2

### List files in 'temp' directory ###
ls -l temp/

### List files in long listing format with human-readable sizes ###
ls -ltrh

### Check disk usage of 'temp' directory ###
du -chs temp/

### Transfer 'temp' directory recursively to '/' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:/

### Transfer files matching '1million.txt*' in 'temp' directory to '/temp' on 192.168.75.20 ###
rsync -av temp/1million.txt* 192.168.75.20:/temp

### List files in current directory ###
ls 

### Create directories 'temp1', 'temp2', 'temp3' ###
mkdir temp1 temp2 temp3

### List files in current directory ###
ls 

### Append data to file '1m.txt' in 'temp1' ###
seq 100000 >> temp1/1m.txt

### Append data to file '1m.txt' in 'temp2' and 'temp3' ###
seq 100000 >> temp[2,3]/1m.txt

### Transfer 'temp*' directories recursively to '/temp' on 192.168.75.20 ###
rsync -av temp* 192.168.75.20:/temp

### Check disk usage of current directory ###
du -chs

### Create directory 'temp4' ###
mkdir temp4

### Append data to file '1m.txt' in 'temp4' ###
seq 1000000 >> temp4/1m.txt

### Transfer 'temp*' directories recursively to '/temp' on 192.168.75.20 ###
rsync -av temp* 192.168.75.20:/temp

### Check disk usage of '1m.txt' in 'temp4' ###
du -chs temp4/1m.txt 

### Check disk usage of current directory ###
du -chs 

### List files in current directory ###
ls -l

### Transfer all files and directories to '/temp' on 192.168.75.20 ###
rsync -av * 192.168.75.20:/temp

### List files in current directory ###
ls -l

### Append data to file 'faraj.txt' ###
seq 1000000 >> faraj.txt

### Transfer all files and directories to '/temp' on 192.168.75.20 ###
rsync -av * 192.168.75.20:/temp

### Check disk usage of current directory ###
du -chs

### Sync and delete files on the destination that are not on the source ###
rsync -av --delete * 192.168.75.20:/temp

### List files in current directory ###
ls -l

### Change directory back to the home directory ###
cd ..

### List files in home directory ###
ls -l

### Sync and delete 'temp' directory on the destination that are not on the source ###
rsync -av --delete temp 192.168.75.20:/temp

### Change directory to '/home/linuxcbt' ###
cd /home/linuxcbt

### List files in current directory ###
ls 

### Change directory to '/tmp/' ###
cd /tmp/

### Change directory back to the parent directory ###
cd ..

### Change directory to 'temp' ###
cd temp

### Change directory to '/home/linuxcbt/temp/' ###
cd /home/linuxcbt/temp/

### List files in 'temp' directory ###
ls -l

### Sync and delete 'temp' directory on the destination that are not on the source ###
rsync -av --delete temp 192.168.75.20:/temp

### Transfer 'temp' directory recursively to '/temp' on 192.168.75.20 ###
rsync -av temp 192.168.75.20:/temp
```
Here are the commands with comments added for each line:


### Check if chrony package is installed ###
rpm -qa | grep chrony
### Check if ntp package is installed ###
rpm -qa | grep ntp

### Check if ntpstat package is installed ###
rpm -qa | grep ntpstat
### Check files installed by ntpdate package ###
rpm -ql ntpdate

### Check if chrony package is installed ###
rpm -qa | grep chrony
### List configuration files installed by ntp package ###
rpm -qlc ntp

### Display help for ntpstat command ###
ntpstat --help
### Display help for ntpdate command ###
ntpdate --help

### Display current date and time ###
date

### List files installed by chrony package ###
rpm -ql chrony
### List files installed by ntp package ###
rpm -ql ntp

### Edit chrony configuration file to allow NTP synchronization from 192.168.75.0/24 ###
vi /etc/chrony.conf
### Edit ntp configuration file to allow NTP synchronization from 192.168.75.0/24 ###
vi /etc/ntp.conf
# Add or modify the line to allow synchronization from 192.168.75.0/24

### Check status of chronyd service ###
systemctl status chronyd.service
### Check status of ntpd service ###
service ntpd status

### Change directory to /etc ###
cd /etc

### Enable chronyd service to start at boot ###
systemctl enable chronyd.service
### Enable ntpd service to start at boot ###
chkconfig ntpd on

### Check status of chronyd service ###
systemctl status chronyd.service
### Check status of ntpd service ###
service ntpd status

### Start chronyd service ###
systemctl start chronyd.service
### Start ntpd service ###
service ntpd start

### List processes related to chronyd ###
ps -ef | grep chronyd
### List processes related to ntp ###
ps -ef | grep ntp

### Display NTP sources using chronyc ###
chronyc sources
### Display NTP sources using ntpq ###
ntpq -np

### Add firewall rule to allow NTP traffic on UDP port 123 permanently ###
firewall-cmd --permanent --add-port=123/udp
### Add firewall rule to allow NTP traffic on UDP port 123 and reload firewall rules ###
iptables -I INPUT -p udp -m udp --dport 123 -j ACCEPT
firewall-cmd --reload
### Save iptables rules and restart iptables service ###
service iptables save && service iptables restart

### Search for 'pool.ntp' entry in chrony configuration file ###
grep 'pool.ntp' /etc/chrony.conf
### Resolve and display IP addresses of '0.centos.pool.ntp.org' ###
dig 0.centos.pool.ntp.org

### Edit chrony configuration file to add 'server 192.168.75.21' ###
vi /etc/chrony.conf
### Edit ntp configuration file to add 'server 192.168.75.21' ###
vi /etc/ntp.conf
# Add or modify the line to specify the NTP server

### Restart chronyd service ###
systemctl restart chronyd.service
### Restart ntpd service ###
service ntpd restart

### Display current date and time ###
date

### Display NTP sources using chronyc ###
chronyc sources
### Display NTP sources using ntpq ###
ntpq -np

### Resolve and display IP addresses of '1.fedora.pool.ntp.org' ###
dig 1.fedora.pool.ntp.org

### Display NTP sources using chronyc ###
chronyc sources
### Display NTP clients using chronyc ###
chronyc clients

## linuxcbtserv1 ##

### Enable ntpd service to start at boot ###
systemctl enable ntpd.service
### Check if ntpd package is installed ###
rpm -qa | grep ntpd

### Start chronyd service and ntpd service ###
systemctl start chronyd.service
service ntpd start

### Display NTP sources using chronyc ###
chronyc sources

### Display contents of chrony configuration file ###
cat /etc/chrony.conf

### Restart chronyd service ###
systemctl restart chronyd.service
### Restart ntpd service ###
service ntpd restart

### Display current date and time ###
date

### Display NTP sources using chronyc ###
chronyc sources

### Edit chrony configuration file to add 'server 192.168.75.21' ###
vi /etc/chrony.conf
### Edit ntp configuration file to add 'server 192.168.75.21' ###
vi /etc/ntp.conf
# Add or modify the line to specify the NTP server

### Restart chronyd service ###
systemctl restart chronyd.service
### Restart ntpd service ###
service ntpd restart

### Display NTP sources using chronyc ###
chronyc sources

### Display current date and time ###
date

### Edit chrony configuration file to add 'server 192.168.75.21' ###
vi /etc/chrony.conf
### Edit ntp configuration file to add 'server 192.168.75.21' ###
vi /etc/ntp.conf
# Add or modify the line to specify the NTP server

### Restart chronyd service ###
systemctl restart chronyd.service
### Restart ntpd service ###
/etc/init.d/ntpd restart

### Display NTP sources using chronyc ###
chronyc sources

### Display current date and time ###
date
```
Here are the commands with comments added for each line:


### Check if ntp package is installed ###
rpm -qa | grep ntp

### Edit chrony configuration file to add NTP servers ###
vi /etc/chrony.conf
# Replace 'servertool' with 'server'
# Add the following lines to specify NTP servers:
# server 127.127.1.0 # local clock
# server 192.168.75.21 # local clock
# Add or modify 'fudge' line:
# fudge 127.127.1.0 stratum 10

### Restart chronyd service to apply configuration changes ###
systemctl restart chronyd.service
# Alternatively, for ntpd:
# service ntpd restart

### Set timezone to America/Toronto ###
timedatectl set-timezone America/Toronto
# Edit timezone configuration file if needed:
# vi /etc/sysconfig/clock
# ZONE="America/Toronto"

### Display current date and time ###
timedatectl

### Enable chronyd service to start at boot ###
systemctl enable chronyd.service
# For ntpd, use:
# chkconfig ntpd on

### Start chronyd service ###
systemctl start chronyd.service
# For ntpd, use:
# service ntpd start

### Add firewall rule to allow NTP traffic on UDP port 123 permanently ###
firewall-cmd --permanent --add-port=123/udp
# Alternatively, for iptables:
# iptables -I INPUT -p udp -m udp --dport 123 -j ACCEPT

### Reload firewall rules to apply changes ###
firewall-cmd --reload
# Alternatively, for iptables:
# service iptables save && service iptables restart

### Display NTP sources to verify synchronization ###
chronyc sources

### Display current date and time after synchronization ###
date
```
Here are the commands with added comments for each line:

### Setting up NTP as a peer (NTP Server Configuration) ###


### Check if ntp package is installed ###
rpm -qa | grep ntp

### Edit NTP configuration file to add peer ###
vi /etc/ntp.conf
# Add the following line to specify the peer:
# peer 192.168.75.21

### Restart chronyd service to apply configuration changes ###
systemctl restart chronyd.service
# Alternatively, for ntpd:
# service ntpd restart

### Set timezone to America/Toronto ###
timedatectl set-timezone America/Toronto
# Edit timezone configuration file if needed:
# vi /etc/sysconfig/clock
# ZONE="America/Toronto"

### Display current date and time ###
timedatectl

### Enable chronyd service to start at boot ###
Systemctl enable chronyd.service
# For ntpd, use:
# chkconfig ntpd on

### Add firewall rule to allow NTP traffic on UDP port 123 permanently ###
Firewall-cmd --permanent --add-port=123/udp
# Alternatively, for iptables:
# iptables -I INPUT -p udp -m udp --dport 123 -j ACCEPT

### Reload firewall rules to apply changes ###
Firewall-cmd --reload
# Alternatively, for iptables:
# service iptables save && service iptables restart

### Display NTP sources to verify synchronization ###
chronyc sources

### Display current date and time after synchronization ###
date
```

### Configuring NTP Client ###


### Check if ntp package is installed ###
rpm -qa | grep ntp

### Edit chrony configuration file to add NTP server ###
vi /etc/chrony.conf
# Add or modify 'server' line to specify NTP server:
# server 192.168.75.21

### Restart chronyd service to apply configuration changes ###
systemctl restart chronyd.service
# Alternatively, for ntpd:
# service ntpd restart

### Set timezone to America/Toronto ###
timedatectl set-timezone America/Toronto
# Edit timezone configuration file if needed:
# vi /etc/sysconfig/clock
# ZONE="America/Toronto"

### Display current date and time ###
timedatectl

### Enable chronyd service to start at boot ###
Systemctl enable chronyd.service
# For ntpd, use:
# chkconfig ntpd on

### Add firewall rule to allow NTP traffic on UDP port 123 permanently ###
Firewall-cmd --permanent --add-port=123/udp
# Alternatively, for iptables:
# iptables -I INPUT -p udp -m udp --dport 123 -j ACCEPT

### Reload firewall rules to apply changes ###
Firewall-cmd --reload
# Alternatively, for iptables:
# service iptables save && service iptables restart

### Restart chronyd service to ensure configuration is applied ###
Systemctl restart chronyd.service
# For ntpd, use:
# service ntpd restart

### Display NTP sources to verify synchronization ###
chronyc sources

### Display current date and time after synchronization ###
date
```
Here are the commands with added comments for each line:

### Checking BIND DNS Installation ###


### Check if named package is installed ###
rpm -qa | grep named

### Check if bind package is installed ###
rpm -qa | grep bind

### List configuration files for bind ###
rpm -qlc bind

### Resolve hostnames using DNS ###
host www.linuxcbt.com
host www.linuxcbt.internal

### Display detailed information about the BIND package ###
rpm -qi bind

### View log rotation configuration for named ###
less /etc/logrotate.d/named

### View main configuration file for named ###
less /etc/named.conf

### List files in /etc sorted by modification time ###
ls -lt /etc

### View RFC 1912 zone configuration file ###
less /etc/named.rfc1912.zones

### List systemd service configuration for named ###
chkconfig --list named

### Check status of named service ###
service named status

### List contents of /var/named directory ###
ls /var/named/

### View contents of named.ca file ###
less /var/named/named.ca

### View contents of named.loopback file ###
less /var/named/named.loopback

### View contents of named.empty file ###
less /var/named/named.empty

### View contents of named.localhost file ###
less /var/named/named.localhost

### List contents of /var/named/dynamic directory ###
ls /var/named/dynamic/

### List detailed contents of /var/named/dynamic directory ###
ls -l /var/named/dynamic/

### List contents of /var/named/data directory ###
ls -l /var/named/data/

### List contents of /var/named/slaves directory ###
ls -l /var/named/slaves/
```

### Setting up Caching-Only DNS Server (Unbound) on linuxcbtserv2 ###


### Install Unbound ###
yum -y install unbound

### Enable named service to start at boot ###
Systemctl enable named
# For ntpd, use:
# chkconfig named on

### Start named service ###
Systemctl start named
# For ntpd, use:
# service named start

### Check running processes for named ###
ps -ef | grep named

### Add firewall rule to allow DNS traffic on TCP port 53 ###
firewall-cmd --zone=public --add-port=53/tcp --permanent
# Alternatively, for iptables:
# iptables -I INPUT -p tcp -m tcp --dport 53 -j ACCEPT

### Add firewall rule to allow DNS service ###
firewall-cmd --permanent --add-service=dns

### Reload firewall rules to apply changes ###
firewall-cmd --reload
# Alternatively, for iptables:
# service iptables save && service iptables restart

### Check SELinux boolean settings for named ###
getsebool -a | grep named

### Set SELinux boolean to allow named to write master zones ###
setsebool -P named_write_master_zones on

### Check SELinux boolean settings for bind ###
getsebool -a | grep bind

### Set SELinux boolean to allow HTTPD mod_auth_ntlm_winbind ###
setsebool -P allow_httpd_mod_auth_ntlm_winbind on

### Set SELinux boolean to allow ypbind ###
setsebool -P allow_ypbind on

### Query DNS server at localhost ###
dig @localhost

### Query DNS server at localhost for www.linuxcbt.com ###
dig @localhost www.linuxcbt.com

### Perform nslookup on server 192.168.75.21 for www.linuxcbt.com ###
nslookup > server 192.168.75.21
> www.linuxcbt.com

### Check open UDP port 53 using netstat ###
netstat -nul | grep 53

### Check open TCP port 53 using netstat ###
netstat -ntl | grep 53

### List all active network connections ###
netstat -ant

### Edit named configuration file to listen on localhost only ###
vi /etc/named.conf
# Add or modify the following lines:
# listen-on port 53 { 127.0.0.1; };
# listen-on-v6 port 53 { ::1; };

### Restart named service to apply configuration changes ###
service named restart

### Check open UDP port 53 after configuration ###
netstat -nul | grep 53

### Edit named configuration file to allow queries from any IP ###
vi /etc/named.conf
# Add or modify the following line under 'options' section:
# allow-query { any; };

### Restart named service after allowing queries from any IP ###
service named restart

### Check open UDP port 53 after allowing queries from any IP ###
netstat -nul | grep 53

### SSH to server at 192.168.75.20 ###
ssh 192.168.75.20
```

### Using linuxcbtserv1 as a DNS Client ###


### Perform DNS query for www.linuxcbt.com on server 192.168.75.21 ###
dig @192.168.75.21 www.linuxcbt.com

### Perform nslookup on server 192.168.75.21 for www.linuxcbt.com ###
nslookup > server 192.168.75.21
> www.linuxcbt.com

### Perform DNS query for www.linuxcbt.com on server 192.168.75.21 ###
dig @192.168.75.21 www.linuxcbt.com

### Perform DNS query for linuxcbtserv2.linuxcbt.internal on server 192.168.75.21 ###
dig @192.168.75.21 linuxcbtserv2.linuxcbt.internal

### Add firewall rule to allow DNS traffic on TCP port 53 ###
firewall-cmd --zone=public --add-port=53/tcp --permanent
# Alternatively, for iptables:
# iptables -I INPUT -p tcp -m tcp --dport 53 -j ACCEPT

### Add firewall rule to allow DNS service ###
firewall-cmd --permanent --add-service=dns

### Reload firewall rules to apply changes ###
firewall-cmd --reload
# Alternatively, for iptables:
# service iptables save && service iptables restart

### Perform DNS query for linuxcbtserv2.linuxcbt.internal on server 192.168.75.21 ###
dig @192.168.75.21 linuxcbtserv2.linuxcbt.internal

### Query NS records for linuxcbt.internal domain ###
dig @192.168.75.21 linuxcbt.internal NSSure, here are the commands with added comments explaining each step:


### BIND-primary server ###
####linuxcbtserv2###

# Edit the BIND configuration file
vi /etc/named.conf

# View the RFC 1912 zone files
cat /etc/named.rfc1912.zones

# Edit named.conf to define the zone for linuxcbt.internal
vi /etc/named.conf
#####classroom ##
zone "linuxcbt.internal" IN {
    type master;
    file "linuxcbt.internal";
    allow-update { none; };
};

# Restart the named (BIND) service
service named restart

# Navigate to the directory where BIND stores zone files
cd /var/named/

# List files to check for named.localhost
ls -l

# View named.localhost file contents
cat named.localhost

# Copy named.localhost to linuxcbt.internal to create a new zone file
cp named.localhost linuxcbt.internal

# Edit linuxcbt.internal zone file to define DNS records
vi linuxcbt.internal
$TTL 60
@   IN SOA  linuxcbt.internal. vdns-admin.linuxcbt.internal. (
               2017121506  ; serial
               1D          ; refresh
               1H          ; retry
               1W          ; expire
               3H )        ; minimum
           IN NS   linuxcbtserv2.linuxcbt.internal.
linuxcbtserv2   IN A    192.168.75.21
www    IN CNAME    linuxcbtserv2.linuxcbt.internal.

# Check running named processes
ps -ef | grep -i named

# View open TCP connections to verify BIND is listening
netstat -ant

# View named service logs
cat /var/named/data/named.run

# Change ownership of the zone file to root.named
chown root.named linuxcbt.internal

# List files in the directory to verify ownership
ls -l

# Restart the named service to apply changes
systemctl restart named.service

# View the end of named service logs to check for errors
tail data/named.run


###linuxcbtsev1###

# Query localhost DNS server for linuxcbtserv2.linuxcbt.internal
dig @localhost linuxcbtserv2.linuxcbt.internal

# Query DNS server at 192.168.75.21 for NS records of linuxcbt.internal
dig @192.168.75.21 linuxcbt.internal NS


###linuxcbtsev2###

# Edit linuxcbt.internal zone file to add CNAME and MX records
vi linuxcbt.internal
www    IN CNAME    linuxcbtserv2.linuxcbt.internal.
           IN MX 2   linuxcbtserv1.linuxcbt.internal.

# Restart named service after making changes
systemctl restart named.service

# View the end of named service logs to check for errors
tail data/named.run

# Change ownership of the zone file to root.named
chown root.named linuxcbt.internal

# Restart named service again to apply ownership changes
systemctl restart named.service

# View the end of named service logs again
tail data/named.run

# Query localhost DNS server for NS, MX, CNAME records of linuxcbt.internal
dig @localhost linuxcbt.internal NS
dig @localhost linuxcbt.internal MX
dig @localhost linuxcbt.internal CNAME
dig @localhost www.linuxcbt.internal

# Edit linuxcbt.internal zone file to add A and NS records for linuxcbtserv1
vi linuxcbt.internal
linuxcbtserv1   IN A    192.168.75.20
@   IN NS   linuxcbtserv1.linuxcbt.internal.

# Restart named service after adding linuxcbtserv1 records
systemctl restart named.service

# View the end of named service logs to check for errors
tail data/named.run

# Query localhost DNS server for MX record of linuxcbt.internal
dig @localhost linuxcbt.internal MX

# Query localhost DNS server for A record of linuxcbtserv1.linuxcbt.internal
dig @localhost linuxcbtserv1.linuxcbt.internal

# Edit linuxcbt.internal zone file to update www record to point to linuxcbtserv2
vi linuxcbt.internal
www    IN CNAME    linuxcbtserv2.linuxcbt.internal.

# Restart named service after updating www record
systemctl restart named.service

# View the end of named service logs to check for errors
tail data/named.run

# Configure firewall to allow DNS traffic over TCP and UDP ports 53
firewall-cmd --permanent --add-port=53/tcp
iptables -I INPUT -p udp -m udp --dport 53 -j ACCEPT

# Reload firewall rules to apply changes
firewall-cmd --reload
service iptables save

Here's the continuation with comments for each command line:


# Restart iptables service to apply firewall rules
service iptables restart

# Restart named service to apply DNS configuration changes
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# Query localhost DNS server for A record of linuxcbtserv1.linuxcbt.internal
dig @localhost linuxcbtserv1.linuxcbt.internal

# Query localhost DNS server for A record of linuxcbtserv2.linuxcbt.internal
dig @localhost linuxcbtserv2.linuxcbt.internal

# Query localhost DNS server for MX record of linuxcbt.internal
dig @localhost linuxcbt.internal MX

# Secure copy (scp) linuxcbt.internal zone file to 192.168.75.20 server
scp linuxcbt.internal 192.168.75.20:

###linuxcbtsev1###

# SSH login as root user to 192.168.75.20 server
ssh root@192.168.75.20

# Install BIND package on linuxcbtsev1 server using Yum package manager
yum install bind -y

# Edit /etc/named.conf to configure BIND settings
vi /etc/named.conf
#listen-on port 53 {192.168.75.20; };
allow-query     { any; };
#####classroom ##
zone "linuxcbt.external" IN {
    type master;
    file "linuxcbt.external";
    allow-update { none; };
};

# Move linuxcbt.internal zone file to /var/named/ and rename to linuxcbt.external
mv linuxcbt.internal /var/named/linuxcbt.external

# Change ownership of linuxcbt.internal zone file to root.named
chown root.named linuxcbt.internal

# Restart named service to apply changes (if error occurs, try service named reload)
systemctl restart named.service

# Append linuxcbt.internal.ca contents to linuxcbt.internal zone file
cat linuxcbt.internal.ca >> linuxcbt.internal

# Restart named service again (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# Query localhost DNS server for A record of linuxcbtserv1.linuxcbt.external
dig @localhost linuxcbtserv1.linuxcbt.external

# Query 192.168.75.20 DNS server for linuxcbt.external zone
dig @192.168.75.20 linuxcbt.external

# Query 192.168.75.20 DNS server for www.linuxcbt.external
dig @192.168.75.20 www.linuxcbt.external

# Query 192.168.75.20 DNS server for MX record of linuxcbt.external
dig @192.168.75.20 linuxcbt.external MX
```
Here are the commands with comments added for each step related to configuring BIND DNS servers, setting up secondary zones, and configuring reverse zones:


### Secondary Server Zone ###

###linuxcbtserv2###
# Navigate to the BIND directory
cd /var/named

# Edit the zone file linuxcbt.internal
vi linuxcbt.internal
(@ IN NS linuxcbtserv1.linuxcbt.internal.)

###linuxcbtserv1###
# Edit /etc/named.conf to configure the secondary zone linuxcbt.internal
vi /etc/named.conf
#####classroom ##
zone "linuxcbt.internal" IN {
    type slave;
    masters {192.168.75.20;};
    #file "linuxcbt.external";
    allow-update { none; };
};

###linuxcbtserv2###
# Restart named service to apply changes
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

###linuxcbtserv1###
# Restart named service to apply changes
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# List files in the slave directory
ls -l slave/

# List files in the dynamic directory
ls -l dynamic/

# List files in the data directory
ls -l data/

# Query localhost DNS server for www.linuxcbt.internal
dig @localhost www.linuxcbt.internal

# Query 192.168.75.20 DNS server for www.linuxcbt.internal
dig @192.168.75.20 www.linuxcbt.internal

# Query 192.168.75.20 DNS server for MX record of linuxcbt.external
dig @192.168.75.20 linuxcbt.external MX

###linuxcbtserv2###
# Edit /etc/named.conf to configure the secondary zone linuxcbt.external
vi /etc/named.conf
#####classroom ##
zone "linuxcbt.external" IN {
    type slave;
    masters {192.168.75.20;};
    #file "linuxcbt.external";
    allow-update { none; };
};

###linuxcbtserv1###
# Navigate to /var/named directory
cd /var/named/

# Edit linuxcbt.external zone file
vi linuxcbt.external
(@ IN NS linuxcbtserv2.linuxcbt.external.)

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

###linuxcbtserv2###
# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# Query localhost DNS server for linuxcbtserv2.linuxcbt.external
dig @localhost linuxcbtserv2.linuxcbt.external

# Query localhost DNS server for linuxcbtserv1.linuxcbt.external
dig @localhost linuxcbtserv1.linuxcbt.external

# Edit linuxcbt.internal zone file on linuxcbtserv2
vi linuxcbt.internal
(ftp IN CNAME linuxcbtserv2.linuxcbt.internal.)

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# Query localhost DNS server for ftp.linuxcbt.internal
dig @localhost ftp.linuxcbt.internal

###linuxcbtserv1###
# Query 192.168.75.20 DNS server for ftp.linuxcbt.internal
dig @192.168.75.20 ftp.linuxcbt.internal

# View the end of named service logs to check for any errors or warnings
tail data/named.run

###linuxcbtserv2###
# Edit linuxcbt.internal zone file on linuxcbtserv2
vi linuxcbt.internal
(sftp IN CNAME linuxcbtserv2.linuxcbt.internal.)
(mail IN CNAME linuxcbtserv2.linuxcbt.internal.)

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

###linuxcbtserv1###
# Edit linuxcbt.external zone file on linuxcbtserv1
vi linuxcbt.external
(sftp IN CNAME linuxcbtserv2.linuxcbt.external.)
(mail IN CNAME linuxcbtserv2.linuxcbt.external.)

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# Query 192.168.75.21 DNS server for ftp.linuxcbt.external
dig @192.168.75.21 ftp.linuxcbt.external

# Query 192.168.75.21 DNS server for mail.linuxcbt.external
dig @192.168.75.21 mail.linuxcbt.external


### BIND Server as Reverse Zone ###

###linuxcbtserv1###
# Edit /etc/named.conf to configure the reverse zone linuxcbt.internal
vi /etc/named.conf
#####classroom####
zone "linuxcbt.internal" IN {
    type slave;
    masters {192.168.75.20;};
    file "slaves/linuxcbt.internal";
    allow-update { none; };
};

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# List files in the slaves directory
ls -l slaves/

# Display contents of linuxcbt.internal zone file
cat slaves/linuxcbt.internal

# Query 192.168.75.20 DNS server for sftp.linuxcbt.internal
dig @192.168.75.20 sftp.linuxcbt.internal

###linuxcbtserv2###
# Edit /etc/named.conf to configure the reverse zone linuxcbt.external
vi /etc/named.conf
#####classroom####
zone "linuxcbt.external" IN {
    type slave;
    masters {192.168.75.20;};
    file "slaves/linuxcbt.external";
    allow-update { none; };
};

# Restart named service to apply changes (if systemctl restart named.service fails, try service named reload)
systemctl restart named.service

# List files in the slaves directory
ls -l slaves/

# Query localhost DNS server for www.linuxcbt.external
dig @localhost www.linuxcbt.external

#### Reverse Zone for 192.168.75.0/24 Subnet ###

###linuxcbtserv2##
# Navigate to /etc directory
cd /etc

# Display contents of named.rfc1912.zones file
cat named.rfc1912.zones

# Edit /etc/named.conf to configure the reverse zone for 192.168.75.0/24 subnet
vi /etc/named.conf
###classroom###
zone "75.168.192.in-addr.arpa" IN {
    type master;
    file "192.168.75.zone";
    allow-update { none; };
};

# Navigate to /var/named directory
cd /var/named

# Display contents of named.loopback file
cat named.loopback

# Display contents of named.localhost file
cat named.localhost

# Copy named.localhost file to 192.168.75.zone
cp -v named.localhost 192.168.75.zone

# Change ownership of 192.168.75.zone file to root.named
chown root.named 192.168.75.zone

# Edit 192.168.75.zone file to configure PTR records
vi 192.168.75.zone
$TTL 1800
@ IN SOA linuxcbtserv2.linuxcbt.internal. dns-admin.linuxcbt.internal. (
                    2017121601 ; serial
                    1D         ; refresh
                    1H         ; retry
                    1W         ; expire
                    3H )       ; minimum
75.168.192.in-addr.arpa. IN NS linuxcbtserv2.linuxcbt.internal.
75.168.192.in-addr.arpa. IN NS linuxcbtserv1.linuxcbt.internal.
20 IN PTR linuxcbtserv1.linuxcbt.internal.
21 IN PTR linuxcbtserv2.linuxcbt.internal.
22 IN PTR linuxcbtserv3.linuxcbt.internal.

# Check named configuration syntax
named-checkconf

# Restart named service to apply changes
systemctl restart named.service

# View the end of named service logs to check for any errors or warnings
tail data/named.run

# Query localhost DNS server for reverse lookup of 192.168.75.21
dig @localhost -x 192.168.75.21

# Query localhost DNS server for reverse lookup of 192.168.75.20
dig @localhost -x 192.168

Here's the revised set of commands with detailed comments:


#### configure DHCP SERVER ####

### Linuxcbtserv2 ###

# Edit network interface configuration file for ens3*1
vi /etc/sysconfig/network-scripts/ifcfg-ens3*1
PREFIX=27

# Disable NetworkManager service
systemctl stop NetworkManager

# Start NetworkManager service
systemctl start NetworkManager

# Display network interface details
ifconfig en0ps

# Search for DHCP package in YUM repositories
yum search dhcp

# Install dhcp-server package with automatic confirmation
yum install dhcp-server -y

# Query installed files from dhcp package
rpm -ql dhcp

# Edit rsyslog configuration to log DHCP events to dhcpd.log
vi /etc/rsyslog.conf
local6.*   /var/log/dhcpd.log

# Copy DHCP server sample configuration file to dhcpd.conf
cp -v /usr/share/doc/dhcp-server/dhcpd.conf.sample /etc/dhcp/dhcpd.conf

# Edit DHCP server configuration file
vi /etc/dhcp/dhcpd.conf
option domain-name "linuxcbt.internal";
option domain-name-servers 192.168.75.101;
authoritative;
log-facility local6;

# DHCP server configuration for subnet 192.168.76.0/27
### Classroom ###
subnet 192.168.76.0 netmask 255.255.255.224 {
    range 192.168.76.1 192.168.76.20;
    option broadcast-address 192.168.76.31;
    # Uncomment and modify additional options as needed
    # option routers rtr-239-0-1.example.org;
    # subnet 10.254.239.0 netmask 255.255.255.224 {
    #     range dynamic-bootp 10.254.239.40 192.168.75.60;
    #     option broadcast-address 10.254.239.31;
    #     option routers rtr-239-0-1.example.org;
    # }
    # Comment out sections not needed
    # comment all subnet mask we do not need
    # comment all host passacaglia
    # comment all shared-network we do not need
}

# Check DHCP service status
systemctl status dhcpd.service

# Enable DHCP service to start on boot
systemctl enable dhcpd.service

# Start DHCP service
systemctl start dhcpd.service

# List DHCP-related logs sorted by time
ls -ltr /var/log/rsyslog

# List processes related to DHCP using grep
ps -ef | grep dhcp

# Check UDP listening ports related to DHCP
netstat -nulp | grep dhcp

# Add UDP port 67 to firewall zone (assuming 'public' zone)
firewall-cmd --zone=public --permanent --add-port=67/udp

# Add DHCP service to firewall zone (assuming 'public' zone)
firewall-cmd --zone=public --permanent --add-service=dhcp

# Reload firewall to apply changes
firewall-cmd --reload

# List services enabled in firewall
firewall-cmd --list-services

# List DHCP server log file
ls -ltr /var/log/dhcpd.log

# Display DHCP leases file
cat /var/lib/dhcpd/dhcpd.leases


### linuxcbtserv1 ###

# Display network interface configuration
ifconfig

# View network interface configuration file for en**
cat /etc/sysconfig/network-scripts/ifcfg-en**

# Bring up network interface en**
ifup en**

# Display network interface details for en**
ifconfig en**

# Ping 192.168.76.21 to test network connectivity
ping -c 3 192.168.76.21

# Trace route to 192.168.76.21
traceroute 192.168.76.21

# Display routing table
netstat -rn


### linuxcbtserv2 ###

# Display DHCP leases file
cat /var/lib/dhcpd/dhcpd.leases

# Display network configuration details for specific interface
ifconfig | grep -i '*****'

# Edit DHCP server configuration file dhcpd.conf
vi /etc/dhcp/dhcpd.conf

# Uncomment host fantasia in dhcpd.conf
## Classroom linuxcbt – reservation for linuxcbtserv1 ##
host linuxcbtserv1 {
    hardware ens3*ernet (mac address of server linuxcbtserv1) 00:00:****;
    fixed-address 192.167.76.20;
}

# Reload DHCP service to apply configuration changes
systemctl reload dhcpd.service

# Display DHCP server log file
cat /var/log/dhcpd.log


### linuxcbtserv1 ###

# Display network interface configuration
ifconfig 

# Bring down network interface en**
ifdown en**

# Bring up network interface en**
ifup en**

# Display network interface details
ifconfig


### linuxcbtserv2 ###

# Display DHCP server log file
cat /var/log/dhcpd.log

# Check DHCP service status using init.d script (if applicable)
/etc/init.d/dhcpd status

# List all services managed by systemctl, filtering for dhcpd service
systemctl --list-services | grep dhcpd

# View DHCP server configuration file dhcpd.conf
less /etc/dhcp/dhcpd.conf
```


Here are the commands with added comments for setting up Samba client on `linuxcbtserv2`:


### Samba client ###

### linuxcbtserv2 ###

# Check if Samba is already installed by querying installed packages
rpm -qa | grep samba

# Install Samba and Samba client packages using YUM package manager
yum install samba samba-client

# Discover SMB/CIFS hosts on the network
findsmb

# List all SELinux booleans related to Samba
getsebool -a | grep samba

# Set SELinux boolean to allow Samba to create home directories
setsebool -P samba_create_home_dirs on

# List available SMB/CIFS shares on the network
smbtree

# Connect to SMB/CIFS share //linuxcbt2k16/c$ using administrator credentials
smbclient -U administrator //linuxcbt2k16/c$

# Display help information for smbclient
smbclient --help

# Connect to Windows remote desktop using rdesktop with fullscreen and IP address specified
rdesktop -f -a 192.168.75.105


### linuxcbt2K16 ###

# List all shares on the Windows server
net share

# Open Computer Management console
compmgmt.msc

# Create a new share named "temp2"
# (Steps assumed to be performed manually in the GUI)

# List all shares on the Windows server again to verify new share creation
net share


### linuxcbtserv2 ###

# List available SMB/CIFS shares on the network again
smbtree

# Open the previously created SMB/CIFS share "temp2" on linuxcbt2k16 using administrator credentials
smbclient -U administrator //linuxcbt2k16/temp2

# List files and directories in the "temp2" share
ls

# Change directory to root (\)
cd \

# List files and directories in root directory
ls

# Display smbclient command help
help

# Exit smbclient session
exit

# Display smbget command help
smbget --help

# Download file "DB_Backup_all_messages_tables.only" from the "temp2" share using username "smbtaradministrator"
smbget -u smbtaradministrator smb://linuxcbt2k16/temp2/DB_Backup_all_messages_tables.only

# List details of the downloaded file
ls -l

# Download file "DB_Backup_all_messages_tables.only" from the "temp2" share to local directory
smbget -O -u administrator smb://linuxcbt2k16/temp2/DB_Backup_all_messages_tables.only

# Extract files from "temp2.tar" using smbstar, specifying server, share, username, target file, and password
smbtar -s linuxcbt2k16 -x temp2 -u linuxcbt -t temp2.tar -p root(password)

# List files in the current directory sorted by time in reverse order
ls -ltr

# View contents of "temp2.tar" using tar command
tar -tvf temp2.tar

# Compress "temp2.tar" into "temp2.tar.gz" using gzip
gzip -c temp2.tar > temp2.tar.gz

# List files in current directory with long listing format, sorted by time in reverse order
ls -ltr
```
Here are the commands with added comments for setting up SAMBA server (`linuxcbtserv2`):


#### SAMBA SERVER ####

# Check if Samba is already installed by querying installed packages
rpm -qa | grep samba

# Install Samba package using YUM package manager
yum install samba -y

# Query specific details about the installed Samba package
rpm -qa samba

# List all SELinux booleans related to Samba
getsebool -a | grep samba

# Set SELinux boolean to allow Samba to create home directories
setsebool -P samba_create_home_dirs on

# View the log rotation configuration for Samba
less /etc/logrotate.d/samba

# View the PAM configuration for Samba
less /etc/pam.d/samba

# Navigate to Samba configuration directory
cd /etc/samba

# List files and directories in Samba configuration directory
ls -l

# Display contents of smbusers file
cat smbusers

# Search for 'nobody' entry in /etc/passwd file
grep nobody /etc/passwd

# Check status of the Samba service
systemctl status smb

# List available SMB/CIFS shares on the network
smbtree

# List SELinux context of the home directory of user 'linuxcbt'
ls -ldZ ~linuxcbt

# Edit Samba configuration file smb.conf using vi editor
vi smb.conf

# Configure Samba workgroup to 'LINUXGENIUS'
workgroup = LINUXGENIUS

# Add firewall rules to allow Samba ports (139/tcp and 445/tcp)
firewall-cmd --permanent --add-port=139/tcp
firewall-cmd --permanent --add-port=445/tcp

# Reload firewall rules
firewall-cmd --reload

# Restart iptables service (assuming this command is correctly formatted)
service iptables restart

# Start the Samba service
systemctl start smb

# Enable Samba service to start automatically on boot
systemctl enable smb

# List listening TCP connections using netstat
netstat -ntlp

# List listening UDP connections using netstat
netstat -nulp

# List running processes containing 'nm'
ps -ef | grep nm

# List available SMB/CIFS shares on the network again
smbtree

# Display help information for hostname command
hostname --help

# List files and directories in current directory with detailed information
ls -l

# Display help information for smbpasswd command
smbpasswd --help

# Add user 'linuxcbt' to Samba password database
smbpasswd -a linuxcbt

# Search for 'linuxcbt' entry in /etc/passwd file
grep linuxcbt /etc/passwd

# Connect to Windows remote desktop using rdesktop with fullscreen and IP address specified
rdesktop -f -a 192.168.75.105


### windows2K16 ###

# Connect to Active Directory with username 'linuxcbt' and password
ad\linuxcbt password

# Open Command Prompt on Windows server
open cmd

# View available shared resources on the network
net view

# Access share '\\linuxcbtserv2' from Windows Explorer
start \\linuxcbtserv2

# Install and configure PuTTY for SSH access to linuxcbtserv2
# Add IP address and hostname for linuxcbtserv2 in PuTTY configuration

# Edit Samba configuration file to add a new share configuration
vi /etc/samba/samba.conf

#### ClassRoom ####

# Define a new Samba share named 'projectx' with specific configurations
[projectx]
comment = share projectx
path = /projectx
guest ok = no
writable = yes
#share modes = no
browseable = yes

# Restart Samba service to apply configuration changes
systemctl restart smb

# List available SMB/CIFS shares on the network again
smbtree

# Create directory '/projectx' for the new Samba share
mkdir /projectx

# List details of the newly created directory '/projectx'
ls -ld /projectx/

# List log files in '/var/log/samba' directory sorted by time in reverse order
ls -ltr /var/log/samba

# Display last lines of '/var/log/samba/linuxcbt2k16' log file
tail /var/log/samba/linuxcbt2k16

# Set full permissions (777) on '/projectx' directory
chmod 777 /projectx/

# List SELinux context of '/projectx' directory
ls -ldZ /projectx/

# Change SELinux context type of '/projectx' directory to 'samba_share_t'
chcon -t samba_share_t /projectx/

# Copy all files from '/home/linuxcbt/' to '/projectx/'
cp /home/linuxcbt/* /projectx/

# List files and directories in '/projectx/' directory
ls -l /projectx/

# Change directory to '/projectx/'
cd /projectx/

# List files and directories in '/projectx/' directory sorted by time in reverse order
ls -ltr

# Change directory to '/etc/samba/'
cd /etc/samba/
```
Here's the configuration steps for setting up Winbind on Linux (`linuxcbtserv2`):


### Winbind configuration ###

# Install samba-winbind package
yum -y install samba-winbind

# Query installed files for samba-winbind package
rpm -ql samba-winbind

# Navigate to /etc directory
cd /etc

# Edit pam_winbind configuration file to configure Winbind authentication
vi security/pam_winbind.conf
krb5_auth = yes
# create homedirectory on the fly
mkhomedir = yes

# Check for installed krb5 packages
rpm -qa | grep krb5

# List location of krb5.conf file
ls /etc/krb5.conf

# Edit krb5.conf file to configure Kerberos settings
vi /etc/krb5.conf
[libdefaults]
default_realm = AD.LINUXCBT.INTERNAL
##disable the dns_lookup_realm
##disable the dns_lookup_kdc

[realms]
AD.LINUXCBT.INTERNAL = {
    kdc = linuxcbt2k16.ad.linuxcbt.internal
    admin_server = linuxcbt2k16
}
##disable the other lines

[domain_realm]
.linuxcbt2k16.ad.linuxcbt.internal = AD.LINUXCBT.INTERNAL
##disable the other lines

# Edit /etc/hosts file to add hostname and IP mapping
vi /etc/hosts
192.168.75.105 linuxcbt2k16.ad.linuxcbt.internal linuxcbt2k16

# Edit /etc/nsswitch.conf to configure name service switch
vi /etc/nsswitch.conf
passwd:     files winbind
shadow:     files
group:      files winbind

# Edit system-auth file in /etc/pam.d/ to configure PAM for Winbind
vi /etc/pam.d/system-auth
auth        sufficient    pam_winbind.so
account     required      pam_winbind.so
password    sufficient    pam_winbind.so

# List files in /etc/pam.d/ directory
ls /etc/pam.d/

# Edit Samba configuration file smb.conf
vi /etc/samba/smb.conf
workgroup = AD
#security = user
#### CLassRoom linuxcbt winbind configuration
security = ads 
realm = AD.LINUXCBT.INTERNAL
idmap uid = 10000-20000
idmap gid = 10000-20000
template shell = /bin/bash
template homedir /home/%D/%U

# Start the Winbind service
systemctl start winbind

# Join the AD domain using net ads join with Administrator credentials
net ads join -U administrator

# Reload Winbind configuration
systemctl reload winbind

# Check Winbind service status using chkconfig
chkconfig --list winbind

# List all users fetched from Active Directory
wbinfo -u

# List all groups fetched from Active Directory
wbinfo -g

# Navigate to /etc/pam.d directory
cd /etc/pam.d

# List permissions of files in /etc/pam.d directory
ls -ll

# Display contents of system-auth-ac file
cat system-auth-ac

# List files in current directory
ls

# List available SMB/CIFS shares on the network
smbtree

# List all users fetched from Active Directory using wbinfo
wbinfo -u

# List available SMB/CIFS shares on the network again
smbtree

# List all groups fetched from Active Directory using wbinfo
wbinfo -g
```

Here's an introduction to Apache configuration and usage on `linuxcbtserv2`:

### Apache Introduction ###

#### Check Apache Installation ####


# Check if Apache HTTPD is installed
rpm -qa | grep httpd

# Install Apache HTTPD if it is not already installed
yum -y install httpd

# List files installed by httpd-tools package
rpm -ql httpd-tools
```

#### Apache Performance Testing ####


# Test Apache server response
ab http://localhost/

# Test Apache server with 100 requests and concurrency of 10
ab -n 100 -c 10 http://localhost/
```

#### Apache Service Management ####


# Check files and directories under /etc/httpd/
cd /etc/httpd
ls -l

# Check directories under /etc/httpd/
ls -l log/
ls -l modules/
ls -l run/

# Check Apache PID file
cat run/httpd.pid

# Check running Apache processes
ps -ef | grep httpd

# Check listening ports for Apache
netstat -ntlp | grep httpd

# Stop Apache service
systemctl stop httpd.service

# Check PID file and processes after stopping Apache
ls -l run
ps -ef | grep httpd

# Start Apache service
systemctl start httpd.service

# Check PID file and processes after starting Apache
ls -l run
cat run/httpd.pid
ps -ef | grep httpd
```

#### Apache Configuration Files ####


# List configuration files under /etc/httpd/conf.d/
ls -l conf.d
cd conf.d
ls -ltr

# View contents of specific configuration files
cat manual.conf
cat php.conf
cat perl.conf
```

#### Apache Document Root ####


# Check contents of /var/www/manual/ directory
ls -l /var/www/manual/
cat /var/www/manual/readme

# Navigate to Apache document root
cd /var/www/html

# Create a simple PHP file
vi index.php
<center>TESTING PHP PROCESSING</center>

# Open the PHP file in a web browser
# URL: http://localhost/index.php

# Backup the PHP file
mv /var/www/html/index.php /var/www/html/index.php.old

# Check contents of files in the document root
cat readme
```

#### Apache Logs ####


# List log files for Apache
ls -l /var/log/httpd/

# View Apache configuration file
cd /etc/httpd/conf
vi httpd.conf

# View Apache access logs
cd /etc/httpd/logs/
less access_log
tail access_log

# View Apache error logs
tail error_log
```
Here's a step-by-step guide to configure Apache Virtual Hosts on `linuxcbtserv2`:

### Apache Virtual Hosts Configuration

#### 1. Prepare Virtual Host Configuration File


# Navigate to the Apache conf.d directory
cd /etc/httpd/conf.d/

# List files to ensure where to place the new configuration
ls -l

# Check the syntax of all Apache configuration files
httpd -S

# View contents of SSL configuration file for reference (optional)
less ssl.conf
```

#### 2. Configure Additional IP Address


# Append the configuration of ens3*:1 to ens3* configuration file
cat /etc/sysconfig/network-scripts/ifcfg-ens3*:1 >> /etc/sysconfig/network-scripts/ifcfg-ens3*

# View the appended configuration
cat /etc/sysconfig/network-scripts/ifcfg-ens3*:1

# Check all network interfaces to ensure the new IP is configured
ifconfig -a

# Deactivate and activate ens3*:1 interface to apply changes
ifdown ens3*:1
ifup ens3*:1
```

#### 3. Create Virtual Host Configuration File


# Navigate back to the conf.d directory
cd /etc/httpd/conf.d/

# Create a new virtual host configuration file for site1.linuxcbt.internal
vi site1.linuxcbt.internal.conf

# Add the following configuration for site1.linuxcbt.internal
<VirtualHost 192.168.75.22>
    ServerAdmin root@linuxcbtserv2.linuxcbt.internal
    ServerName site1.linuxcbt.internal
    DocumentRoot /var/www/site1.linuxcbt.internal
    <Directory /var/www/site1.linuxcbt.internal>
        Order allow,deny
        Allow from all
    </Directory>
</VirtualHost>
```

#### 4. Set Up Document Root for Virtual Host


# Create the document root directory for site1.linuxcbt.internal
mkdir /var/www/site1.linuxcbt.internal

# Reload Apache to apply the new virtual host configuration
systemctl reload httpd.service

# Check Apache configuration to ensure the virtual host is set up correctly
httpd -S

# Monitor access logs for any requests to site1.linuxcbt.internal
tail /var/log/httpd/access_log
```

#### 5. Test Virtual Host Configuration


# Check the current date and time for log entries
date

# Monitor error logs for any issues related to the virtual host
tail /var/log/httpd/error_log

# Copy an existing PHP file into the virtual host's document root
cp -v /var/www/html/index.php.old /var/www/site1.linuxcbt.internal/index.php

# Edit the index.php file to show "SITE1" content
vi /var/www/site1.linuxcbt.internal/index.php
<center>SITE1</center>

# Check the default directory index configuration in Apache
grep -i directoryindex ../conf/httpd.conf

# Rename the PHP file to a different extension
mv /var/www/site1.linuxcbt.internal/index.php /var/www/site1.linuxcbt.internal/index.ggg

# Update the DirectoryIndex directive in the virtual host configuration
vi site1.linuxcbt.internal.conf
DirectoryIndex index.ggg

# Reload Apache after making changes
systemctl reload httpd

# Check Apache configuration again
httpd -S

# Monitor access logs for any requests to site1.linuxcbt.internal
tail /var/log/httpd/access_log
```

#### 6. Revert Changes (if necessary)


# Rename the PHP file back to .php extension
mv /var/www/site1.linuxcbt.internal/index.ggg /var/www/site1.linuxcbt.internal/index.php

# Comment out the DirectoryIndex directive in the virtual host configuration
vi site1.linuxcbt.internal.conf
#DirectoryIndex index.ggg

# Reload Apache after reverting changes
systemctl reload httpd

# Check Apache configuration
httpd -S
```
Certainly! Here's the configuration process with comments added:


### Configure Host-Header Virtual Hosts ###

# Navigate to the network scripts directory
cd /etc/sysconfig/network-scripts/

# List all network interfaces and their configurations
ls -l

# Copy the configuration of ens3*:1 to ens3*:2
cp ifcfg-ens3*:1 ifcfg-ens3*:2

# Edit the ens3*:2 configuration file
vi ifcfg-ens3*:2
DEVICE=ens3*:2
IPADDR=192.168.75.23

# Activate the ens3*:2 interface
ifup ens3*:2

# Verify the interface configuration
ifconfig ens3*:2

# Return to the previous working directory
cd $OLDPWD

# List files in the current directory in long format
ls -ltr

# Copy site1 configuration to create site2 configuration
cp site1.linuxcbt.internal.conf site2.linuxcbt.internal.conf

# Edit the site2 virtual host configuration file
vi site2.linuxcbt.internal.conf
Sure, here are comments added to each line of the `vi site2.linuxcbt.internal.conf` file:

```apache
# VirtualHost configuration for site2.linuxcbt.internal on IP address 192.168.75.23
<VirtualHost 192.168.75.23>
    # Email address of the server administrator
    ServerAdmin root@linuxcbtserv2.linuxcbt.internal
    # Primary domain name associated with this VirtualHost
    ServerName site2.linuxcbt.internal
    # Directory where the website files for site2.linuxcbt.internal are located
    DocumentRoot /var/www/site2.linuxcbt.internal

    <Directory /var/www/site2.linuxcbt.internal>
        # Controls access to the directory
        Order allow,deny
        # Allow all requests from any client
        Allow from all
    </Directory>
</VirtualHost>

# Create the directory for site2
mkdir /var/www/site2.linuxcbt.internal

# Copy all contents from site1 to site2 directory
cp -apvf /var/www/site1.linuxcbt.internal/* /var/www/site2.linuxcbt.internal/

# List contents of site2 directory to verify copy
ls -l /var/www/site2.linuxcbt.internal/

# Edit index.php in site2 to display custom content
vi /var/www/site2.linuxcbt.internal/index.php
<center>SITE2</center>

# Restart Apache to apply changes
Systemctl restart httpd.service

# Navigate to the Apache configuration directory
cd /etc/httpd/conf

# Edit the main httpd configuration file
vi /etc/httpd/conf/httpd.conf
#Classroom linuxcbt
NameVirtualHost 192.168.75.22:80

# Edit site1 virtual host configuration
vi site1.linuxcbt.internal.conf
<VirtualHost 192.168.75.22:80>

# Edit site2 virtual host configuration
vi site2.linuxcbt.internal.conf
<VirtualHost 192.168.75.22:80>

# Restart Apache to apply virtual host changes
Systemctl restart httpd.service

# Check Apache configuration using -S option
httpd -S

# Display contents of resolv.conf file
cat /etc/resolv.conf

# Edit resolv.conf to define domain and nameservers
vi /etc/resolv.conf
search linuxcbt.internal
nameserver 192.168.75.21
nameserver 192.168.75.20

# Edit the DNS zone file for linuxcbt.internal
vi /var/named/linuxcbt.internal
site1   IN  A   192.168.75.22
site2   IN  CNAME   site1.linuxcbt.internal.

# Restart named service to apply DNS changes
Systemctl restart named.service

# Test DNS resolution for site2.linuxcbt.internal and site1.linuxcbt.internal
dig site2.linuxcbt.internal
dig site1.linuxcbt.internal

# Search for CustomLog directive in main httpd configuration file
grep -i customlog ../conf/httpd.conf

# Edit site1 virtual host configuration to define CustomLog
vi site1.linuxcbt.internal.conf
CustomLog logs/site1.linuxcbt.internal_log combined

# Edit site2 virtual host configuration to define CustomLog
vi site2.linuxcbt.internal.conf
CustomLog logs/site2.linuxcbt.internal_log combined

# Restart Apache to apply CustomLog changes
Systemctl restart httpd.service

# List all logs in the logs directory in long format
ls -ltr ../logs/

# Display contents of site1.linuxcbt.internal_log
cat ../logs/site1.linuxcbt.internal_log

# Display contents of site2.linuxcbt.internal_log
cat ../logs/site2.linuxcbt.internal_log

# Display last 10 lines of error_log
tail ../logs/error_log

# Display last 10 lines of site2.linuxcbt.internal_log
tail ../logs/site2.linuxcbt.internal_log

# Search for ErrorLog directive in main httpd configuration file
grep -i Errorlog ../conf/httpd.conf

# Edit site1 virtual host configuration to define ErrorLog
vi site1.linuxcbt.internal.conf
ErrorLog logs/site1.linuxcbt.internal_error_log

# Edit site2 virtual host configuration to define ErrorLog
vi site2.linuxcbt.internal.conf
ErrorLog logs/site2.linuxcbt.internal_error_log

# Restart Apache to apply ErrorLog changes
Systemctl restart httpd.service

# List all logs in the logs directory in long format
ls -ltr ../logs/

# Display contents of site1.linuxcbt.internal_error_log
cat ../logs/site1.linuxcbt.internal_error_log

# Display contents of site2.linuxcbt.internal_error_log
cat ../logs/site2.linuxcbt.internal_error_log

# Check Apache configuration using -S option
httpd -S
```
Here are the commands with added comments for configuring the mail server (`postfix`):


### MAIL Server ###

# Check if postfix is installed
rpm -qa | grep postfix

# List configuration files for postfix
rpm -qlc postfix

# Enable postfix service to start on boot
chkconfig postfix on

# Check SELinux boolean settings related to postfix
getsebool -a | grep postfix

# Allow postfix to write to the local mail spool directory
setsebool -P allow_postfix_local_write_mail_spool=1

# Configure firewall to allow SMTP service
firewall-cmd --permanent --add-service smtp
firewall-cmd --reload

# Save and restart iptables service (if used)
# iptables -I INPUT -m tcp -p tcp -s 192.168.75.0/24 --dport 25 -j ACCEPT
# service iptables save
# service iptables restart

# Navigate to postfix configuration directory
cd /etc/postfix/

# Backup the original main.cf file
cat main.cf >> main.cf.orginal

# Edit the main postfix configuration file
vi main.cf
# Set the following parameters:
# Queue directory location
queue_directory = /var/spool/postfix
# Hostname of the mail server
myhostname = linuxcbtserv2.linuxcbt.internal
# Domain name
mydomain = linuxcbt.internal
# Originating domain
myorigin = $mydomain
# Listen on all network interfaces
inet_interfaces = all
# Networks that are allowed to relay or send mail
mynetworks = 192.168.75.0/24, 127.0.0.0/8

# Display non-default postfix settings
postconf -n

# Display all postfix configurations
postconf

# Set postfix to start automatically on boot
# systemctl enable postfix

# Start postfix service
# systemctl start postfix

# Check postfix service status
# systemctl status postfix

# Set postfix as the default mail transfer agent
alternatives --set mta /usr/sbin/sendmail.postfix

# Display current MTA setting
alternatives --display mta | grep current

# Configure MTA interactively if needed
alternatives --config mta

# Send test emails
date | mail -s "localhost test mail" linuxcbt
date | mail -s "Local Delivery Test" user3
date | mail -s "localhost test mail" linuxcbt@linuxcbtserv2.linuxcbt.internal

# Check mail queue
mailq

# Navigate to user's home directory
cd ~linuxcbt/

# Check mail for the user
mail

# Check mailbox content for linuxcbt user
cat /var/spool/mail/linuxcbt

# Check mail queue again
mailq

# Display contents of postfix sendmail wrapper script
cat /usr/sbin/sendmail.postfix

# List files in reverse order of modification time
ls -ltr

# Display root user's mailbox
cat root
```
Here are the commands for configuring postfix to relay mail through a smart host (`linuxcbtserv1.linuxcbt.internal`):


### Relay Mail through smart Host ###

# Edit postfix main configuration file
vi /etc/postfix/main.cf

# Add or modify the following line to specify the smart host
relayhost = linuxcbtserv1.linuxcbt.internal

# Edit postfix access file to allow relay from specific networks or domains (if needed)
vi /etc/postfix/access
# Example entries:
# 192.168.75.0    RELAY
# linuxcbt.internal       RELAY

# Check current postfix configuration settings
postconf -n

# Restart postfix service to apply changes
service postfix restart

# Configure postfix as the default mail transfer agent (MTA)
alternatives --config mta /usr/sbin/sendmail.postfix

# Set postfix as the default MTA permanently
alternatives --set mta /usr/sbin/sendmail.postfix

# Display current MTA setting
alternatives --display mta | grep current

# If needed, configure MTA interactively
alternatives --config mta

# Send test email to verify smart host relay
date | mail -s "RemoteHostMail" linuxcbt1@linuxcbtserv1.linuxcbt.internal

# Navigate to the mail spool directory
cd /var/spool/mail/

# List mail files for users (replace 'assulai', 'linuxcbt', and 'root' with actual usernames)
ls -l
cat assulai 
cat linuxcbt 
cat root 

# Check mail queue and postfix configuration files
ls -ltr /etc/postfix/
cat root
```
It seems like you have a comprehensive set of MySQL commands and configurations listed here. I'll clarify and correct some commands to ensure they are accurate and understandable. Let's go through them step by step:

### MySQL Installation and Basic Commands


# Check if MySQL packages are installed
rpm -qa | grep mysql

# Search for MySQL packages available in the repository
yum search mysql

# Install MySQL server
yum -y install mysql-server

# Verify installed files for mysql-server package
rpm -ql mysql-server

# Check the configuration file for MySQL (my.cnf)
less /etc/my.cnf

# Enable MySQL service to start on boot
systemctl enable mysqld

# Start MySQL service
systemctl start mysqld
```

### MySQL Login and Basic Operations


# Log into MySQL server as root user
mysql -u root -p

# Once logged in, you can perform MySQL operations:

# Show existing databases
mysql> show databases;

# Select a specific database to use
mysql> use mysql;

# Show tables in the selected database
mysql> show tables;

# Describe a table structure
mysql> describe user;

# View users and their privileges
mysql> select user, host, password from user;

# Exit MySQL shell
mysql> \q
```

### Managing MySQL Users and Passwords


# Change MySQL root password
/usr/bin/mysqladmin -u root password 'abc123'

# Log into MySQL with new root password
mysql -u root -p

# Set password for root user for specific host
mysql> set password for 'root'@'linuxcbtserv2.internal' = password('abc123');

# Show users and their passwords after password changes
mysql> select user, host, password from mysql.user;

# Flush privileges to apply changes
mysql> flush privileges;

# Exit MySQL shell
mysql> \q
```

### Creating and Managing Databases and Tables


# Log into MySQL as root
mysql -u root -p

# Create a new database
mysql> create database addressBook;

# Switch to the newly created database
mysql> use addressBook;

# Create a table 'contacts' with specified fields
mysql> create table contacts (
    fname char(20),
    lname char(20),
    bus_phone char(20),
    email char(30),
    PRIMARY KEY(email)
);

# Show tables in the current database
mysql> show tables;

# Describe structure of 'contacts' table
mysql> describe contacts;

# Insert records into 'contacts' table
mysql> INSERT INTO contacts VALUES ('faraj', 'assulai', '0766450357', 'farajassulai@gmail.com');

# Select all records from 'contacts' table
mysql> select * from contacts;

# Update a record in 'contacts' table
mysql> update contacts set email = 'mcsredhat@gmail.com' where fname = 'faraj';

# Delete a record from 'contacts' table
mysql> delete from contacts where email = 'mcsredhat@gmail.com';

# Exit MySQL shell
mysql> \q
```
Certainly! Here are the commands with comments added:


### PHP ###

# Check installed PHP packages
rpm -qa | grep php

# Search for MySQL related packages
yum search mysql

# Install PHP MySQL extension
yum -y install php-mysql

# Query information about the installed php-mysql package
rpm -qi php-mysql

# List files installed by php-mysql package
rpm -ql php-mysql

# View MySQL configuration for PHP
less /etc/php.d/mysql.ini
less /etc/php.d/mysqli.ini

# Access MySQL database and execute a query to select all records from 'contacts' table
mysql -pabc123 -e 'select * from contacts' addressBook

# List detailed information about /var/www/html/ directory
ls -ld /var/www/html/

# Create a new directory for the PHP script
mkdir /var/www/html/addressbook

# Edit the PHP script to display database records (addressbook.php)
vi /var/www/html/addressbook/addressbook.php

<?php 
#initiate instance of MYSQLI module
# this step is toutmount to using mysql from the CLI to connect to the server
$mysqli = new mysqli(`127.0.0.1`,`root`,`abc123`,`addressBook`);
# connection check routine
If (mysali_connect_errno())
{printf (“connection failed:%s\n”, mysql_connect_error());
Exit();
}
 # define the query that is to be executed 
$query1 = `SELECT * from contacts`;
Echo `<table><tr>
<td>Firest Name</td>
<td>Last Name</td>
<td>Business Phone 1</td>
<td>E-Mail</td>
</tr>;
#Excute the query
If ($result = $mysqli->query($query1))
{ while ($row =$result->fetch_assoc())
$fname=$row [“fname”];
$lname=$row [“lname”];
$bus_phone1=$row [“bus_phone1”];
$email=$row [“email”];
#open row
Echo `<tr>`;
#open cells
Echo `<td>, $fname,</td>`;
Echo `<td>, $lname,</td>`;
Echo `<td>, $bus_phone1,</td>`;
Echo `<td>, $email,</td>`;
#close row
Echo `</tr>`;
}}#closes entire records 
# close the table state
Echo `</table>`;
#end
?>

# Change ownership of the directory to 'linuxcbt' user
chown linuxcbt /var/www/html/addressbook/

# Open a web browser and navigate to http://localhost/addressbook/addressbook.php
# This step should display the PHP script output

# Access MySQL database interactively and show tables in 'addressBook' database
mysql -pabc123 -h 127.0.0.1 addressBook
mysql> show tables;
mysql> exit

# Restart Apache HTTP server to apply any configuration changes
systemctl restart httpd

# Check loaded Apache modules
httpd -M

# View Apache error log for any issues
tail /etc/httpd/logs/error_log

# View the PHP script error log
cd /var/www/html/addressbook/addressbook.php
tail /etc/httpd/logs/error_log

# Check if MySQL is listening on port 3306
netstat -ntl | grep 3306

# View MySQL configuration file
less /etc/my.cnf 

# Check SELinux booleans related to MySQL and HTTPD
getsebool -a | grep mysql
setsebool -P mysql_connect_any on
setsebool -P allow_user_mysql_connect on
getsebool -a | grep -i mysql
getsebool -a | grep httpd
setsebool -P httpd_can_network_connect_db on

# Open the PHP script in a browser again to verify after SELinux changes
# http://localhost/addressbook/addressbook.php

# Display the content of the PHP script file
cat /var/www/html/addressbook/addressbook.php

# Access MySQL client without specifying a database (interactive mode)
mysql -pabc123
mysql> \q

# Disable SELinux booleans after testing (if needed)
setsebool -P mysql_connect_any off
setsebool -P allow_user_mysql_connect off

# Restart Apache HTTP server after SELinux changes
systemctl restart httpd

# Open the PHP script in a browser again to verify after SELinux changes
# http://localhost/addressbook/addressbook.php
```
Here are the commands related to setting up NFS (Network File System) with comments added:


### NFS ###

# Check which package provides the 'showmount' command
rpm -qf `which showmount`

# Query NFS utilities package to list its files
rpm -ql nfs-utils

# List NFS init scripts
ls -l /etc/init.d/nfs*

# Query which package installed the NFS init script
rpm -qf /etc/init.d/nfs

# Show NFS exports on the local NFS server (linuxcbtserv2)
showmount linuxcbtserv2

# Show all NFS mounts on linuxcbtserv2
showmount --all linuxcbtserv2

# Check NFS service status in chkconfig
chkconfig --list nfs

# Display contents of NFS exports configuration
cat /etc/exports

# Enable NFS service to start on boot
systemctl enable nfs

# Start NFS service
systemctl start nfs

# Check NFS port status
netstat -ntl | grep -i '111|2046'

# Check NFS and RPCBIND service status
netstat -ntlp | grep -i 'nfs|rpcbind'

# Open NFS service in firewall permanently
firewall-cmd --permanent --add-service nfs

# Open NFS ports 111 and 2049 in firewall permanently (alternative)
firewall-cmd --permanent --add-port=111,2049/tcp

# Reload firewall rules
firewall-cmd --reload

# Check SELinux booleans related to NFS
getsebool -a | grep nfs

# Set SELinux booleans for NFS
setsebool -P allow_nfsd_anon_write on
setsebool -P virt_use_nfs on
setsebool -P xen_use_nfs on
setsebool -P nfs_export_all_ro=1 nfs_export_all_rw=1 samba_share_nfs=1 httpd_use_nfs=1 use_nfs_home_dirs=1

# Edit NFS exports configuration file to export /projectx directory
vi /etc/exports
# Add: /projectx *(rw)

# Create /projectx directory
mkdir /projectx

# Verify NFS exports configuration
exportfs -v

# Export all directories listed in /etc/exports
exportfs -a

# Show NFS exports on linuxcbtserv2
showmount --exports linuxcbtserv2

# Show mounted NFS shares on linuxcbtserv2
showmount -e linuxcbtserv2

# Access linuxcbtserv2 via SSH
ssh root@192.168.75.20

# Create /projectx directory on remote host
mkdir /projectx

# Mount linuxcbtserv2:/projectx to /projectx locally
mount -t nfs linuxcbtserv2.linuxcbt.internal:/projectx /projectx

# Edit resolv.conf to set nameserver
vi /etc/resolv.conf
# Add: nameserver 192.168.75.21

# Query DNS for linuxcbtserv2.linuxcbt.internal
dig linuxcbtserv2.linuxcbt.internal

# Remount linuxcbtserv2:/projectx to /projectx
mount -t nfs linuxcbtserv2.linuxcbt.internal:/projectx /projectx

# Display mounted filesystems
mount

# Display disk space usage for /projectx
df -h /projectx

# Append 10000 lines to /projectx/1k.txt on linuxcbtserv1
seq 10000 >> /projectx/1k.txt

# List details of /projectx/1k.txt
ls -l /projectx/1k.txt

# Check if nfsnobody user exists in /etc/passwd
grep nfsnobody /etc/passwd

# Check if nobody group exists in /etc/group
grep nobody /etc/group

# Edit NFS exports configuration to restrict access to /projectx
vi /etc/exports
# Change: /projectx 192.168.75.20(ro) 192.168.75.101(rw)

# Apply changes in /etc/exports
exportfs -a

# Append 10000 lines to /projectx/1k.txt on linuxcbtserv1
seq 10000 >> /projectx/1k.txt

# Display current NFS exports configuration
cat /etc/exports

# Unmount /projectx on linuxcbtserv1
umount /projectx

# Display currently mounted filesystems
cat /proc/mounts

# Remount linuxcbtserv2:/projectx to /projectx
mount -t nfs linuxcbtserv2.linuxcbt.internal:/projectx /projectx

# Append 1000 lines to /projectx/1m.txt
seq 1000 >> /projectx/1m.txt

# Display currently mounted filesystems
cat /proc/mounts

# SSH to linuxcbtserv2.linuxcbt.internal as root
ssh root@192.168.75.101

# Create /project directory
mkdir /project

# Mount linuxcbtserv2:/projectx to /projectx on remote host
mount -t nfs linuxcbtserv2.linuxcbt.internal:/projectx /projectx

# Check open network ports
netstat -ntlp

# Query DNS for linuxcbtserv2.linuxcbt.internal
dig linuxcbtserv2.linuxcbt.internal

# Display NFS ports in use on linuxcbtserv2
netstat -ntlp | grep 2049

# Append 10000 lines to /projectx/100k.txt on 192.168.75.101
seq 10000 >> /projectx/100k.txt

# List permissions of /project directory
ls -ld /project

# List details of /project/100k.txt on linuxcbtserv2
ls -l /project/100k.txt

# Append 10000 lines to /projectx/100k.txt on linuxcbtserv1
seq 10000 >> /projectx/100k.txt

# Edit hosts file to add entry for linuxcbtserv2.linuxcbt.internal
vi /etc/hosts
# Add: 192.168.75.21 linuxcbtserv2.linuxcbt.internal linuxcbtserv2

# Edit fstab file to mount linuxcbtserv2:/projectx automatically on boot
vi /etc/fstab
# Add: linuxcbtserv2.linuxcbt.internal:/projectx /projectx nfs defaults 0 0

# Unmount /projectx to apply changes in /etc/fstab
umount /projectx

# Mount all filesystems listed in /etc/fstab
mount -a

# Show NFS exports from linuxcbtBUIL (192.168.75.101)
showmount --all 192.168.75.21

# Mount all filesystems listed in /etc/fstab on linuxcbtserv1
mount -a

# Display currently mounted filesystems
mount

# Query DNS for linuxcbtserv2.linuxcbt.internal
dig linuxcbtserv2.linuxcbt.internal

# Show NFS ports in use on linuxcbtserv2
netstat -ntlp

# Append 10000 lines to /projectx/100k.txt on linuxcbtserv1
seq 10000 >> /projectx/100k.txt

# Edit NFS exports configuration to allow rw access to /projectx for specific IPs
vi /etc/exports
# Add: /projectx 192.168.75.20(rw) 192.168.75.101(rw)

# Apply changes in /etc/exports
exportfs -av

# Append 10000 lines to /projectx/100k.txt on linuxcbtserv1
seq 10000 >> /projectx/100k.txt

# Display disk space usage
df -h
```
Here's the continuation and completion of the HTTPS (apache_ssl) setup commands with comments:


### HTTPS (apache_ssl) ###

#linuxcbtserv2

# Query files provided by mod_ssl package
rpm -ql mod_ssl

# Query files provided by crypto-utils package
rpm -ql crypto-utils

# Query files provided by openssl package
rpm -ql openssl

# Navigate to Apache's configuration directory
cd /etc/httpd/conf.d

# List contents of the directory
ls -l

# View contents of ssl.conf file
less ssl.conf

# Check if Apache is listening on port 443
netstat -ntlp | grep 443

# Open the browser and type https://localhost
# Check Apache's HTTPS port status
netstat -ant | grep 443

# Capture network traffic on linuxcbtserv2 related to port 80 or 443
tcpdump -vv Ae tcp port 80 or 443

# SSH into 192.168.75.20
ssh 192.168.75.20

# Check location of curl command
which curl

#linuxcbtserv2

# Capture network traffic on linuxcbtserv2 related to src/dst host 192.168.75.20 and port 80 or 443
tcpdump -vv Ae src or dst host 192.168.75.20 and tcp port 80 or 443

#linuxcbtserv1

# Send HTTP request to 192.168.75.21
curl http://192.168.75.21

# Send HTTPS request to 192.168.75.21, ignoring certificate warnings
curl -k https://192.168.75.21

#linuxcbtserv2

# Capture network traffic on linuxcbtserv2 related to src/dst host 192.168.75.20 and port 80 or 443
tcpdump -vv Ae src or dst host 192.168.75.20 and tcp port 80 or 443

#linuxcbtserv1

# Send HTTPS request to 192.168.75.21, ignoring certificate warnings
curl -k https://192.168.75.21

#linuxcbtserv2

# Navigate to PKI directory
cd /etc/pki

# List contents of tls directory
ls -l tls

# List contents of private directory within tls
cd tls
ls -l private/

# Generate SSL key and certificate for linuxcbtserv2.linuxcbt.internal
genkey linuxcbtserv2.linuxcbt.internal
# Follow prompts: 
# - Next
# - 2048 (high-security, medium speed)
# - Next

# Edit ssl.conf to configure server certificate and private key paths
vi /etc/httpd/conf.d/ssl.conf
# Set:
# SSLCertificateFile /etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt
# SSLCertificateKeyFile /etc/pki/tls/private/linuxcbtserv2.linuxcbt.internal.key

# Check files generated in /etc/pki/tls
cd /etc/pki/tls
ls -l
ls -l private/
ls -l certs/
ls -l rpm-gpg/
cat rpm-gpg

# Generate SSL key and certificate for site1.linuxcbt.internal
genkey site1.linuxcbt.internal
# Follow prompts:
# - Next
# - 1024 (medium-security, medium speed)
# - Next

# Copy ssl.conf to create a new virtual host configuration for site1.ssl.linuxcbt.internal
cp ssl.conf site1.ssl.linuxcbt.internal.conf
vi site1.ssl.linuxcbt.internal.conf
# Add:
# Listen 4443
# <VirtualHost *:4443>
# DocumentRoot "/var/www/site1.linuxcbt.internal"
# ServerName site1.linuxcbt.internal:4443
# <Directory /var/www/site1.linuxcbt.internal>
# Order allow,deny
# Allow from all
# </Directory>
# ErrorLog logs/site1.ssl_error_log
# TransferLog logs/site1.ssl_access_log
# SSLCertificateFile /etc/pki/tls/certs/site1.linuxcbt.internal.crt
# SSLCertificateKeyFile /etc/pki/tls/private/site1.linuxcbt.internal.key

# Check contents of /var/www/site1.linuxcbt.internal directory
ls -l /var/www/site1.linuxcbt.internal

# Check system resources using top command
top

# Edit ssl.conf to configure server certificate and private key paths for linuxcbtserv2.linuxcbt.internal
vi /etc/httpd/conf.d/ssl.conf
# Comment out or remove existing SSLCertificateFile and SSLCertificateKeyFile lines
# Set:
# SSLCertificateFile /etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt
# SSLCertificateKeyFile /etc/pki/tls/private/linuxcbtserv2.linuxcbt.internal.key

# Navigate to certs directory
cd certs/

# Edit make-dummy-cert script to generate dummy SSL certificate for site1.linuxcbt.internal
vi make-dummy-cert
# Follow prompts to generate certificate for site1.linuxcbt.internal

# View contents of generated certificate
less site1.linuxcbt.internal.crt

# Concatenate contents of site1.linuxcbt.internal.crt to ../private/site1.linuxcbt.internal
cat site1.linuxcbt.internal.crt >> ../private/site1.linuxcbt.internal

# Edit ../private/site1.linuxcbt.internal to configure SSLCertificateKeyFile path
vi ../private/site1.linuxcbt.internal
# Set:
# SSLCertificateKeyFile /etc/pki/tls/private/site1.linuxcbt.internal.key
```
Here are the commands to remove the public key from `site1.linuxcbt.internal.crt`, rename the private key, configure DNS settings, and perform HTTPS testing:


# Edit site1.linuxcbt.internal.crt to remove public key at the top of the file
vi site1.linuxcbt.internal.crt

# View recent changes and verify
ls -ltr

# Check the configuration file for site1.ssl.linuxcbt.internal
less /etc/httpd/conf.d/site1.ssl.linuxcbt.internal.conf

# List contents of ../private/ directory
ls -l ../private/

# Navigate to ../private/ directory
cd ../private/

# Rename private key file from 'site1.linuxcbt.internal' to 'site1.linuxcbt.internal.key'
mv site1.linuxcbt.internal site1.linuxcbt.internal.key

# List contents of ../certs/ directory
ls -l ../certs

# Restart Apache HTTP server
systemctl restart httpd

# Check if Apache is listening on port 4443
netstat -ntlp | grep 4443

# Navigate to ../certs/ directory
cd ../certs/

# List contents of ../certs/ directory
ls -ltr

# Perform DNS lookup for site1.linuxcbt.internal
dig site1.linuxcbt.internal

# View contents of /etc/resolv.conf
cat /etc/resolv.conf

# Edit /etc/resolv.conf to set nameserver to 192.168.75.21
vi /etc/resolv.conf
nameserver 192.168.75.21

# Perform DNS lookup for site1.linuxcbt.internal after setting nameserver
dig site1.linuxcbt.internal

# Edit /var/named/linuxcbt.internal to add DNS entry for site1.linuxcbt.internal
vi /var/named/linuxcbt.internal
# Add line: site1 IN A 192.168.75.21

# Restart named service
systemctl restart named.services

# Perform DNS lookup for site1.linuxcbt.internal to verify resolution
dig site1.linuxcbt.internal

# Open the browser and navigate to https://site1.linuxcbt.internal:4443

# Edit make-dummy-cert to generate dummy certificate for linuxcbtserv2.linuxcbt.internal
vi make-dummy-cert
echo linuxcbtserv2.linuxcbt.internal
echo root@linuxcbtserv2.linuxcbt.internal
./make-dummy-cert linuxcbtserv2.linuxcbt.internal

# List contents of current directory
ls -l

# Edit /etc/httpd/conf.d/ssl.conf to set server certificate and private key for linuxcbtserv2.linuxcbt.internal
vi /etc/httpd/conf.d/ssl.conf
# Set:
# SSLCertificateFile /etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt
# SSLCertificateKeyFile /etc/pki/tls/private/linuxcbtserv2.linuxcbt.internal.key

# Restart Apache HTTP server
systemctl restart httpd

# List contents with recent modifications
ls -ltr

# Append linuxcbtserv2.linuxcbt.internal to linuxcbtserv2.linuxcbt.internal.crt
cat linuxcbtserv2.linuxcbt.internal >> linuxcbtserv2.linuxcbt.internal.crt

# Rename linuxcbtserv2.linuxcbt.internal to linuxcbtserv2.linuxcbt.internal.crt
mv linuxcbtserv2.linuxcbt.internal linuxcbtserv2.linuxcbt.internal.crt

# Check Apache's HTTP server status on port 443
netstat -antp | grep httpd

# List current directory
ls

# View contents of site1.linuxcbt.internal.crt for verification
less site1.linuxcbt.internal.crt

# List contents of ../private/ directory
ls -ltr ../private/

# View contents of linuxcbtserv2.linuxcbt.internal.key
less linuxcbtserv2.linuxcbt.internal.key

# Test HTTPS connection to site1.linuxcbt.internal on port 4443 using curl
curl -k https://site1.linuxcbt.internal:4443

# Test HTTPS connection to linuxcbtserv2.linuxcbt.internal using curl
curl -k https://linuxcbtserv2.linuxcbt.internal

#linuxcbtservbuild 192/168.75.100

# View contents of /etc/resolv.conf
cat /etc/resolv.conf

# Edit /etc/resolv.conf to set nameserver to 192.168.75.21
vi /etc/resolv.conf
nameserver 192.168.75.21

# Test HTTPS connection to linuxcbtserv2.linuxcbt.internal on port 4443 using curl
curl -k https://linuxcbtserv2.linuxcbt.internal:4443

# Test HTTPS connection to linuxcbtserv2.linuxcbt.internal using curl
curl -k https://linuxcbtserv2.linuxcbt.internal
```
Here are the commands with added comments:

### 1. Explore Packet Internet Groper (PING)
- **a.** Identify the package containing `ping`:
   
   rpm -qf `/bin/ping`  # Check which package provides the 'ping' command (part of 'iputils' package)
   ```

- **b.** Send 3 packets of 32 bytes each to `192.168.75.1`:
   
   ping -c 3 192.168.75.1 -s 32  # Send 3 packets of 32 bytes (+ 8 bytes ICMP overhead) to the target
   ```

- **c.** Send 3 packets of 56 bytes to `192.168.75.1`, one every 3 seconds:
   
   ping -c 3 -i 3 192.168.75.1  # Send 3 packets of 56 bytes, with a 3-second interval between each packet
   ```
   Note: PING might be blocked by L3 devices on your network or the Internet.

### 2. Telnet
- Use Telnet to test port accessibility (not recommended for SSH access):
   
   telnet 192.168.75.1 22  # Test port 22 (SSH) accessibility on host 192.168.75.1
   ```
   Install Telnet if necessary:
   
   yum install telnet  # Install Telnet if it's not already available
   ```

### 3. Netstat
- **a.** Display all sockets with service/port and hostname resolution:
   
   netstat -a  # List all sockets (TCP, UDP, Unix) with service/port and hostname resolution
   ```

- **b.** Display all sockets with service/port without name resolution:
   
   netstat -an  # List all sockets with service/port, suppressing name resolution
   ```

- **c.** Show only TCP sockets and listeners without name resolution:
   
   netstat -ntl  # Display TCP sockets and listeners, suppress name resolution
   ```

- **d.** Show TCP sockets and listeners with program details (requires root):
   
   netstat -ntlp  # Display TCP sockets and listeners with program details (requires root)
   ```
   Note: Use `-p` option as root to reveal all programs.

- **e.** Display network interfaces:
   
   netstat -i  # Show network interfaces and their statistics
   ```

- **f.** Show all UDP listeners:
   
   netstat -nulp  # List all UDP sockets that are listening
   ```

- **g.** Display kernel routing table:
   
   netstat -rn  # Show the kernel routing table
   ```

### 4. ARP (Address Resolution Protocol)
- Show ARP cache:
  
  arp -a || arp -e  # Display ARP cache entries (may differ based on system)
  ```
  Note: ARP is usually self-managing.

### 5. Traceroute
- **a.** Trace route to `192.168.75.1`:
  
  traceroute 192.168.75.1  # Trace the route packets take to reach 192.168.75.1
  ```

- **b.** Trace route to `www.linuxcbt.com`:
  
  traceroute www.linuxcbt.com  # Trace the route packets take to reach www.linuxcbt.com
  ```

### 6. nslookup
- Perform DNS lookup for `www.linuxcbt.com`:
  
  nslookup www.linuxcbt.com  # Query DNS for the IP address of www.linuxcbt.com
  ```
  Note: DNS client tools use `/etc/resolv.conf` to determine which DNS servers to query.

### 7. dig
- **a.** Perform DNS query for `www.linuxcbt.com`:
  
  dig www.linuxcbt.com  # Perform a DNS query to retrieve information about www.linuxcbt.com
  ```

- **b.** Perform reverse DNS lookup for `71.6.195.206`:
  
  dig -x 71.6.195.206  # Perform a reverse DNS lookup for the IP address 71.6.195.206
  ```

- **c.** Query MX records for `linuxcbt.com`:
  
  dig linuxcbt.com mx  # Query DNS for the MX (Mail Exchange) records of linuxcbt.com
  ```

### 8. whois
- Retrieve ownership information for `linuxcbt.com`:
  
  whois linuxcbt.com  # Fetch IP/domain ownership information for linuxcbt.com
  ```
Here are the commands with added comments:

### IPv4 Configuration

#### 1. Explore key: Directories & Files

- **a.** `/etc/sysconfig/network`
   
   # View system-wide network settings, including hostname, gateway, and enabled/disabled status
   less /etc/sysconfig/network
   ```

- **b.** `/etc/sysconfig/networking`
   
   # This directory is controlled by the 'system-config-network' tool. Avoid manual edits.
   less /etc/sysconfig/networking
   ```

- **c.** `/etc/hosts`
   
   # Local name database; ensure it includes essential entries like localhost
   less /etc/hosts
   ```

   Example contents of `/etc/hosts`:
   ```
   192.168.75.21	linuxcbtserv2.linuxcbt.internal	linuxcbtserv2	# Added by NetworkManager
   127.0.0.1	localhost.localdomain	localhost
   ::1		localhost6.localdomain6	localhost6
   ```

   Note: Add hosts to `/etc/hosts` for which DNS resolution is unavailable or not desirable.

- **d.** `/etc/sysconfig/network-scripts`
   - **d1.** Interface configuration files
     
     # Describes up/down configuration of interfaces (e.g., ens3*)
     less /etc/sysconfig/network-scripts/ifcfg-ens3*
     cat /etc/sysconfig/network-scripts/ifcfg-ens3*

     ```

   - **d2.** Control files
     
     # Scripts that control how interfaces are brought up/down
     less /etc/sysconfig/network-scripts/ifup-ens3*
     less /etc/sysconfig/network-scripts/ifdown-ens3*
     ```

   - **d3.** Network function files
     
     # Contains key network information required for the network stack
     less /etc/sysconfig/network-scripts/network-functions
     ```

   - **d4.** `ifup-ens3*` and `ifdown-ens3*`
     
     # Commands to bring up or down ens3*ernet interfaces like ens3*, ens3*1, etc.
     ifup ens3*
     ifdown ens3*0
     nmcli device connect ens3*0
     nmcli device disconnect ens3*0

     ```

- **e.** `ifconfig`
   - **e1.** View configuration of interfaces
     
     # Enumerates current configuration of all interfaces
     ifconfig
     ip addr show

     ```

   - **e2.** Create additional IP alias on ens3*0
     
     # Create an additional IP alias on ens3*0 with address 192.168.75.22
     sudo ip addr add 192.168.75.22/24 dev ens3*0
     ifconfig ens3*0:1 192.168.75.22 netmask 255.255.255.0
     ```

     - **e2.1.** Test connectivity from specific IP
       
       # Ping using source IP 192.168.75.22 to target 192.168.75.21
       ping -c 3 -I 192.168.75.22 192.168.75.21
       ```

   - **e3.** Add another IP alias on ens3*0
     
     # Create another IP alias on ens3*0 with address 192.168.75.23
     	sudo ip addr add 192.168.75.23/24 dev ens3*0
	ifconfig ens3*0:2 192.168.75.23 netmask 255.255.255.0
     ```

   - **e4.** Preserve changes across system restart or NetworkManager service restart
     
     # Copy existing ens3*0 configuration to ens3*0:1 to preserve changes
     sudo nmcli connection modify ens3*0 +ipv4.addresses 192.168.75.22/24
     sudo nmcli connection up ens3*0
     cp -v /etc/sysconfig/network-scripts/ifcfg-ens3*0 /etc/sysconfig/network-scripts/ifcfg-ens3*0:1
     ```

- **f.** Add and remove IP aliases dynamically
   - **f1.** Add an IP alias using `ifcfg`
     
     # Add a new IP alias 192.168.75.24/24 to ens3*0:3 and perform duplicate address detection
     sudo nmcli connection modify ens3*0 +ipv4.addresses 192.168.75.24/24
     sudo nmcli connection up ens3*0
     ifcfg ens3*0:3 add 192.168.75.24/24
     ```

   - **f2.** Remove the sub-interface ens3*0:1
     
     # Delete the sub-interface ens3*0:1 with IP address 192.168.75.22
     sudo ip addr del 192.168.75.22/24 dev ens3*0

     ifcfg ens3*0:1 delete 192.168.75.22/24
     ```

   - **f3.** Remove the sub-interface ens3*0:3
     
     # Delete the sub-interface ens3*0:3 with IP address 192.168.75.24
     sudo ip addr del 192.168.75.24/24 dev ens3*0
     ifconfig ens3*0:3 del 192.168.75.24
     ```

Here are the commands with explanations for managing RPM packages:

### RPM package list

1. **List all packages related to `named` (DNS server):**
   
   rpm -qa | grep named
   ```
   This command lists all installed packages that include "named" in their names.

2. **List files provided by `nfs` package:**
   
   rpm -ql nfs
   ```
   This command lists all files provided by the `nfs` package.

3. **List configuration files provided by `nfs` package:**
   
   rpm -qlc nfs
   ```
   This command lists configuration files provided by the `nfs` package.

4. **List files provided by `named` package:**
   
   rpm -ql named
   ```
   This command lists all files provided by the `named` package.

5. **Query information about an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -qa /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```
   Queries if the RPM package `dcraw-8.91-1.fc11.i586.rpm` is installed.

6. **List files provided by an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -ql /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```
   Lists all files provided by the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

7. **List configuration files provided by an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -qlc /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```
   Lists configuration files provided by the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

8. **List documentation files provided by an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -qd /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```
   Lists documentation files provided by the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

9. **Find dependencies of an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -R /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```
   Lists dependencies required by the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

10. **Upgrade an RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -U /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Upgrades the RPM package `dcraw-8.91-1.fc11.i586.rpm` if a newer version is available.

11. **Query information about an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -qi /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Displays detailed information about the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

12. **Verify integrity of files in an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -V /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Verifies the integrity of files in the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

13. **Import a GPG key from an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm --import /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Imports the GPG key provided by the RPM package `dcraw-8.91-1.fc11.i586.rpm`.

14. **Force install an RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm --force /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Forces installation of the RPM package `dcraw-8.91-1.fc11.i586.rpm` even if conflicts exist.

15. **Remove an RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -e /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```
    Removes the RPM package `dcraw-8.91-1.fc11.i586.rpm` from the system.

### RPM install package from cdrom

1. **Mount CD-ROM (`/dev/cdrom`) to `/mnt`:**
   
   mount /dev/cdrom /mnt
   ```

2. **Verify mount status:**
   
   mount | grep /mnt
   ```

3. **List packages containing `dcrow` or `dcraw` in their names from CD-ROM:**
   
   ll /mnt/Packages | grep dcrow
   ll /mnt/Packages | grep dcraw
   ```

4. **Verify integrity of the RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -K /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

5. **Install the RPM package (`dcraw-8.91-1.fc11.i586.rpm`) with verbose output:**
   
   rpm -ivh /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

6. **Verify integrity of files in the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -V /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

7. **Query information about the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -iq /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

8. **List files provided by the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -lq /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

9. **List configuration files provided by the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -ql /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

10. **List configuration files provided by the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -qc /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```

11. **List documentation files provided by the installed RPM package (`dcraw-8.91-1.fc11.i586.rpm`):**
    
    rpm -qd /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```

12. **Install the RPM package (`dcraw-8.91-1.fc11.i586.rpm`) with verbose output:**
    
    rpm -ivh /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
    ```

13. **Remove the RPM package named `dcraw`:**
    
    rpm -e dcraw
    ```

14. **Query documentation files of the removed RPM package (`dcraw`):**
    
    rpm -qd dcraw
    ```
Here's how to install an RPM package from a CD-ROM, create a local YUM repository, and use it:

### RPM install package from CD-ROM

1. **Mount CD-ROM (`/dev/cdrom`) to `/mnt`:**
   
   mount /dev/cdrom /mnt
   ```

2. **List packages containing `dcraw` in their names from CD-ROM:**
   
   ll /mnt/Packages | grep dcraw
   ```

3. **Verify integrity of the RPM file (`dcraw-8.91-1.fc11.i586.rpm`):**
   
   rpm -K /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

4. **Install the RPM package (`dcraw-8.91-1.fc11.i586.rpm`) with verbose output:**
   
   rpm -ivh /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm
   ```

5. **Verify integrity of files in the installed RPM package (`dcraw`):**
   
   rpm -V dcraw
   ```

6. **Query information about the installed RPM package (`dcraw`):**
   
   rpm -qi dcraw
   ```

7. **List files provided by the installed RPM package (`dcraw`):**
   
   rpm -ql dcraw
   ```

8. **List configuration files provided by the installed RPM package (`dcraw`):**
   
   rpm -qlc dcraw
   ```

9. **List documentation files provided by the installed RPM package (`dcraw`):**
   
   rpm -qd dcraw
   ```

10. **Remove the installed RPM package (`dcraw`):**
    
    rpm -e dcraw
    ```

### Create local YUM repository

1. **Install `createrepo` tool:**
   
   yum -y install createrepo
   ```

2. **Create a directory for the local YUM repository:**
   
   mkdir -p /var/yum/repos.d/local
   cd /var/yum/repos.d/local
   ```

3. **Copy the RPM package (`dcraw-8.91-1.fc11.i586.rpm`) to the local repository directory:**
   
   cp /mnt/Packages/dcraw-8.91-1.fc11.i586.rpm /var/yum/repos.d/local/
   ```

4. **Verify the copied file:**
   
   ls -l
   ```

5. **Create YUM repository metadata:**
   
   createrepo -v /var/yum/repos.d/local
   ```

6. **List the generated metadata files (`repodata/`):**
   
   ll repodata/
   ```

7. **Create a YUM repository configuration file (`local.repo`):**
   
   vi /etc/yum.repos.d/local.repo
   ```
   Add the following content:
   ```
   [local]
   name=local yum repository
   baseurl=file:///var/yum/repos.d/local/
   enabled=1
   gpgcheck=0
   ```

8. **Clean YUM cache:**
   
   yum clean all
   ```

9. **List available YUM repositories:**
   
   yum repolist
   ```

10. **Verify the local YUM repository (`local`):**
    
    yum repolist local
    ```
To share a DVD using FTP and HTTPD on your CentOS system, follow these steps for each mens3*od:

### Share DVD using FTP

1. **Check if `vsftpd` is installed:**
   
   rpm -qa | grep vsftpd
   ```

2. **Create a directory for FTP server:**
   
   mkdir -p /var/ftp/pub/rhel6
   ```

3. **Unmount the CD-ROM if it's already mounted:**
   
   umount /dev/cdrom
   ```

4. **Mount the CD-ROM to copy its contents:**
   
   mount /dev/cdrom /mnt/
   cd /mnt/
   ```

5. **Copy contents from CD-ROM to FTP directory:**
   
   cp -r /mnt/* /var/ftp/pub/rhel6/
   ```

6. **Unmount and eject the CD-ROM:**
   
   umount /mnt
   eject
   ```

7. **Set SELinux context recursively for FTP directory:**
   
   chcon -Rv --reference=/var/ftp/pub/ /var/ftp/pub/rhel6/
   ```

8. **Set SELinux file context type for FTP directory:**
   
   semanage fcontext -a -s system_u -t public_content_t /var/ftp/pub/rhel6
   ```

9. **Configure iptables to allow FTP access from your subnet (`192.168.75.0/24`):**
   
   iptables -I INPUT -m tcp -p tcp -s 192.168.75.0/24 --dport 21 -j ACCEPT
   ```

10. **Save iptables rules:**
    
    service iptables save
    ```

11. **Restart iptables service:**
    
    service iptables restart
    ```

12. **Restart `vsftpd` service:**
    
    service vsftpd restart
    ```

13. **Set `vsftpd` to start at boot:**
    
    chkconfig vsftpd on
    ```

14. **Access FTP share using a client:**
    ```
    ftp://192.168.75.21/rhel6
    ```

### Share DVD using HTTPD

1. **Check if `httpd` is installed:**
   
   rpm -qa | grep httpd
   ```

2. **Create a directory for HTTPD server:**
   
   mkdir -p /var/www/html/rhel6
   ```

3. **Unmount the CD-ROM if it's already mounted:**
   
   umount /dev/cdrom
   ```

4. **Mount the CD-ROM to copy its contents:**
   
   mount /dev/cdrom /mnt/
   cd /mnt/
   ```

5. **Copy contents from CD-ROM to HTTPD directory:**
   
   cp -r /mnt/* /var/www/html/rhel6/
   ```

6. **Unmount and eject the CD-ROM:**
   
   umount /mnt
   eject
   ```

7. **Set SELinux context recursively for HTTPD directory:**
   
   chcon -Rv --reference=/var/www/html/ /var/www/html/rhel6/
   ```

8. **Set SELinux file context type for HTTPD directory:**
   
   semanage fcontext -a -s system_u -t public_content_t /var/www/html/rhel6
   ```

9. **Configure iptables to allow HTTP access from your subnet (`192.168.75.0/24`):**
   
   iptables -I INPUT -m tcp -p tcp -s 192.168.75.0/24 --dport 80 -j ACCEPT
   ```

10. **Save iptables rules:**
    
    service iptables save
    ```

11. **Restart iptables service:**
    
    service iptables restart
    ```

12. **Restart `httpd` service:**
    
    service httpd restart
    ```

13. **Set `httpd` to start at boot:**
    
    chkconfig httpd on
    ```

14. **Access HTTP share using a web browser:**
    ```
    http://192.168.75.21/rhel6
    ```
Here are the commands and outputs for exploring the Linux kernel and related modules:

1. **Check the current kernel version:**
   
   uname -r
   ```
   Output example: `2.6.29.4-167.fc11.i586`

2. **Query installed kernel packages:**
   
   rpm -q kernel
   ```
   Output example:
   ```
   kernel-2.6.29.4-167.fc11.i586
   ```

3. **List contents of `/boot` directory:**
   
   ll /boot/
   ```
   This will show files related to the boot process including kernels, initramfs images, and boot configuration.

4. **List contents of `/boot/grub` directory:**
   
   ll /boot/grub
   ```
   This directory contains configuration files and modules used by GRUB (Grand Unified Bootloader).

5. **Explore `/proc` directory:**
   
   ll /proc
   ```
   This virtual directory contains runtime system information.

6. **View CPU information:**
   
   ll /proc/cpuinfo
   ```
   This file provides detailed information about the CPU(s) installed on the system.

7. **List kernel modules for a specific kernel version:**
   
   ll /lib/modules/2.6.29.4-167.fc11.i586/
   ```
   This directory contains kernel modules specific to the indicated kernel version.

8. **List all installed kernel modules:**
   
   ll /lib/modules
   ```
   This directory contains subdirectories for each installed kernel version, each containing kernel modules.

9. **List kernel drivers for a specific kernel version:**
   
   ll /lib/modules/2.6.29.4-167.fc11.i586/kernel/drivers/
   ```
   This directory contains kernel drivers specific to the indicated kernel version.

10. **Explore `/usr/src/` directory:**
    
    ll /usr/src/
    ```
    This directory typically contains kernel headers and source code.

11. **List kernel source directories:**
    
    ll /usr/src/kernels/
    ```
    This directory contains source code for installed kernel versions.

12. **List loaded kernel modules:**
    
    lsmod
    ```
    This command lists all currently loaded kernel modules.

13. **Update module dependency files:**
    
    depmod
    ```
    This updates the module dependency files based on the current kernel.

14. **Update module dependencies for a specific module (e.g., `e1000`):**
    
    depmod e1000
    ```

15. **View contents of `/etc/modprobe.conf` (if present):**
    
    cat /etc/modprobe.conf
    ```
    This file contains configuration options for kernel modules.

16. **Remove a kernel module (e.g., `e1000`):**
    
    depmod -r e1000
    ```

17. **List USB-related modules and their dependencies:**
    
    modprobe -lt usb
    ```

18. **Display information about a specific kernel module (e.g., `e1000`):**
    
    modinfo e1000
    ```
Certainly! Here are the commands with comments added for each line:


### Adding module to initial Ram Disk ###

# Navigate to the /boot directory
cd /boot/
# List all files starting with initrd- to find the initramfs file(s)
ll initrd-*

# Extract the contents of the initramfs file to inspect its contents
zcat initrd-* | cpio -ivt

# Create a new initramfs with Bluetooth module included
mkinitrd --with=bluetooth initrd-bluetooth-`uname -r` `uname -r`

# Edit the GRUB configuration file to point to the new initramfs file
vi /boot/grub/grub.conf
# Modify the line to include the new initramfs file
# Example: initrd /initrd-bluetooth-2.6.18-92.el5

# Check if the Bluetooth module is loaded
lsmod | grep Bluetooth


### Updating kernel ###

# Update the kernel using YUM package manager
yum -y update kernel

# Alternatively, upgrade the kernel using RPM
rpm -Uvh /var/yum/repos.d/kernal/kernel-2.6.18-128.1.6.el5.rpm


### Upgrade kernel ###

# Install a new kernel using YUM
yum -y install kernel

# Alternatively, install a new kernel using RPM
rpm -ivh /var/yum/repos.d/kernal/kernel-2.6.18-128.1.6.el5.rpm


### Patching kernel ###

# Navigate to the temporary directory where the patch file is located
cd /var/tmp

# Decompress the patch file
gunzip patch-2.6.28.gz

# Apply the patch to the kernel source code
patch -p0 patch-2.6.28

Here's the step-by-step process with comments added for clarity:


### Modifying kernel ###

# View the contents of sysctl configuration file
cat /etc/sysctl.conf

# Display all current sysctl settings
sysctl -a

# Example command to modify a specific sysctl parameter (replace tcp_abc with actual parameter)
sysctl net.ipv4.tcp_abc

# Set a sysctl parameter temporarily (valid until next reboot)
echo 10 > /proc/sys/net/ipv4/tcp_abc

# Edit sysctl.conf to make changes persistent across reboots
vi /etc/sysctl.conf
# Add or modify the parameter as needed, e.g., net.ipv4.tcp_abc = 10

# Apply the changes from sysctl.conf
sysctl -p


### Building new kernel from source code ###

# Install necessary build tools and dependencies
yum -y install binutils cpp gcc glib2-devel glibc-devel glibc-headers gtk2-devel libglade2-devel ncurses ncurses-devel gt-devel tcl

# Navigate to the directory where kernel source RPM is installed
cd /var/tmp
rpm -ivh kernel-2*

# Create necessary directories for building the kernel
mkdir /usr/src/fedora/BUILD
mkdir -p /usr/src/fedora/SPECS

# Change directory to kernel source RPM SPECS directory
cd /usr/src/fedora/SPECS

# Extract the source code of the kernel using rpmbuild
rpmbuild -bp --target=i386 kernel-2.6-spec


### Building new kernel ###

# Change directory to the extracted kernel source code directory
cd /usr/src/fedora/BUILD/kernel-2.6.18/linux-2.6.18.i386

# Edit the makefile to modify kernel version if necessary
vi Makefile
# Example: EXTRAVERSION = -NEW-Kernel-1

# Clean the kernel source tree
make mrproper

# Build the kernel and kernel modules
make

# Install the kernel modules
make modules_install

# Install the new kernel
make install

# View the GRUB configuration file to ensure the new kernel is added
cat /boot/grub/grub.conf

# Create a new initramfs image for the new kernel version
mkinitrd /boot/initrd-2.6.18-NEW-Kernel-1.img 2.6.18-NEW-Kernel-1

# Reboot the system to boot into the new kernel
reboot
```
Here are the commands with comments added to each line explaining their purpose:

### TCP Wrappers ###

# Check if TCP Wrappers package is installed
rpm -qa | grep tcp_wrappers

# Edit hosts.allow file to control allowed services
vi /etc/hosts.allow

# Edit hosts.deny file to control denied services
vi /etc/hosts.deny
```

### Firewall and IPTables ###

# Check if IPTables package is installed
rpm -qa | grep iptables

# View current IPTables configuration
cat /etc/sysconfig/iptables

# List all IPTables rules
iptables -L

# Allow incoming TCP traffic on port 80 from 192.168.75.0/24 subnet
iptables -t filter -A INPUT -s 192.168.75.0/24 -p tcp --dport 80 -j ACCEPT

# Accept all incoming traffic from 192.168.75.0/24 on interface ens3*0
iptables -I INPUT -s 192.168.75.0/24 -i ens3*0 -j ACCEPT

# Delete the rule that drops ICMP packets not going to 192.168.3.3
iptables -D OUTPUT -d ! 192.168.3.3 -p icmp -j DROP

# Allow forwarding traffic from 192.168.75.21 to 192.168.75.200
iptables -A FORWARD -s 192.168.75.21 -d 192.168.75.200 -j ACCEPT

# Insert a rule to allow incoming TCP traffic on port 21
iptables -I INPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT

# Insert a rule to drop outgoing TCP traffic on port 1000
iptables -I OUTPUT -m state --state NEW -p tcp --dport 1000 -j DROP

# Save the IPTables configuration
service iptables save

# View the updated IPTables configuration after saving
cat /etc/sysconfig/iptables
```
Here are the commands with comments explaining their purpose:


# Create a new custom chain named NEW_CHAIN in iptables
iptables -N NEW_CHAIN

# Flush all rules in the OUTPUT chain of iptables
iptables -F OUTPUT

# Start the iptables service
service iptables start

# Restart the iptables service to apply any changes made
service iptables restart

# Stop the iptables service
service iptables stop

# Enable the iptables service to start on boot
chkconfig iptables on

# Check the current status of the iptables service
service iptables status

# Start the iptables service
service iptables start

# Add IP address 192.168.75.21/24 with broadcast address 192.168.75.255 on device ens3*0
ip addr add 192.168.75.21/24 broadcast 192.168.75.255 dev ens3*0

# Add IP address 192.168.75.15/24 with broadcast address 192.168.75.255 on device ens3*1 and display IP addresses
ip addr add 192.168.75.15/24 broadcast 192.168.75.255 dev ens3*1 && ip addr

# Display all IP addresses assigned to interfaces
ip addr

# Add a NAT rule to iptables to masquerade (SNAT) outgoing traffic from subnet 192.168.75.0/24 going out through ens3* interface
iptables -t nat -A POSTROUTING -o ens3* -s 192.168.75.0/24 -j MASQUERADE

# Save the current iptables configuration
service iptables save

# Restart the iptables service to apply the saved configuration
service iptables restart

# Edit the sysctl.conf file to enable IP forwarding
vi /etc/sysctl.conf
# Add or modify the following line to enable IP forwarding
net.ipv4.ip_forward = 1

# Apply the changes in sysctl.conf to enable IP forwarding without rebooting
sysctl -p

# Edit the resolv.conf file to set the default gateway to 192.168.75.0
vi /etc/resolv.conf
# Set the gateway IP address (this is typically done with the 'gateway' keyword, not a line in the file)

# Save the changes and exit the editor
```
Here are the commands with comments explaining their purpose:


# Display SELinux status including mode, policy version, and mode from config file
sestatus -v

# Display which SELinux mode is currently enforced (Enforcing, Permissive, or Disabled)
which setenforce

# Display help information for the setenforce command
setenforce --help

# List SELinux configuration file under /etc/sysconfig
ls -l /etc/sysconfig/selinux

# List SELinux directory under /selinux
ls -l /selinux/

# View the SELinux configuration file for detailed settings
less /etc/selinux/config

# Display the SELinux security context of the current user
id -Z

# List files in the /root directory with their SELinux security context
ll -Z /root/

# Change directory to /var/www/html
cd /var/www/html

# List files in /var/www/html and display their SELinux security context
ls -Lz

# Temporarily set SELinux enforcement to Permissive mode
setenforce 0

# Display SELinux status to verify it's in Permissive mode
sestatus

# List all SELinux booleans related to httpd and grep for httpd_can_network_connect_db
getsebool -a | grep httpd

# Set the httpd_can_network_connect_db boolean to off
setsebool httpd_can_network_connect_db off

# Verify the change by listing httpd-related SELinux booleans again
getsebool -a | grep httpd

# Temporarily set SELinux enforcement back to Enforcing mode
setenforce 1

# Display SELinux status to verify it's back in Enforcing mode
sestatus

# Set the httpd_can_network_connect_db boolean back to on
setsebool httpd_can_network_connect_db on

# Verify the change by listing httpd-related SELinux booleans again
getsebool -a | grep httpd

# Display all processes running with their associated SELinux security contexts
ps -Ez | grep httpd

# List files in /var/www/html and display their SELinux security context
ls -Lz

# Change directory to the home directory of the 'linuxcbt' user
cd ~linuxcbt

# Create a directory named 'temp2' in the home directory of 'linuxcbt'
mkdir temp2

# Create a file named 'test.txt' in the 'temp2' directory
touch test.txt

# Move the 'test.txt' file from 'temp2' directory to /var/www/html
mv temp2/test.txt /var/www/html/

# List 'test.txt' file in /var/www/html
ls -l tes*

# Display detailed SELinux security context of 'test.txt'
ll -Z tes*

# Temporarily set SELinux enforcement to Permissive mode
setenforce 0

# Display SELinux status to verify it's in Permissive mode
sestatus

# Access 'test.txt' file in the browser to test permissions
# http://localhost/test.txt

# Temporarily set SELinux enforcement to Permissive mode again (duplicate command)
setenforce 0

# Display SELinux status to verify it's in Permissive mode again
sestatus

# Access 'test.txt' file in the browser again to test permissions
# http://localhost/test.txt

# Create a directory named 'temp2' and a file named 'test2.txt' in it under the home directory of 'linuxcbt'
mkdir ~linuxcbt/temp2 && touch ~linuxcbt/temp2/test2.txt

# Move the 'test2.txt' file from 'temp2' directory to /var/www/html
mv -v ~linuxcbt/temp2/test2.txt /var/www/html

# List 'test2.txt' file in /var/www/html
ll -l tes*

# Display detailed SELinux security context of 'test2.txt'
ll -Z tes*

# Display SELinux file context information for files specified in file_contexts
cat /etc/selinux/targeted/contexts/files/file_contexts

# Display all processes with their associated security contexts
ps -efZ

# Display the current SELinux enforcement mode
getenforce

# Temporarily set SELinux enforcement to Permissive mode
setenforce 0

# Edit the SELinux configuration file to permanently set SELINUX=disabled
vi /etc/selinux/config
# Change SELINUX=enforcing to SELINUX=disabled

# Edit the GRUB configuration file to disable SELinux at boot time
vi /boot/grub/grub.conf
# Add selinux=0 to the kernel command line

# Display SELinux status to verify current mode
sestatus

# Display SELinux configuration file details
cat /etc/selinux/config

# Display SELinux security context of /root/anaconda-ks.cfg file
ll -Z /root/anaconda-ks.cfg

# Change SELinux security context of /root/anaconda-ks.cfg to public_content_t with user_u type
chcon -vu user_u -t public_content_t /root/anaconda-ks.cfg

# Add a file context mapping for /root/anaconda-ks.cfg to public_content_t
semanage fcontext -a -s user_u -t public_content_t /root/anaconda-ks.cfg

# Display SELinux security context of /root/anaconda-ks.cfg directory
ll -dZ /root/anaconda-ks.cfg

# Change SELinux security context of /etc/passwd to match /etc/group
chcon -v --reference /etc/passwd /etc/group

# Copy /etc/group to /tmp and preserve SELinux context
cp --preserve=context /etc/group /tmp

# Display SELinux security context of /etc/group in /tmp
ll -Z /etc/group

# Display SELinux security context of /tmp/group
ll -Z /tmp/group

# Change SELinux security context of /root directory to public_content_t with user_u type
chcon -vu user_u -t public_content_t /root

# Add a file context mapping for /root directory to public_content_t
semanage fcontext -a -s user_u -t public_content_t /root

# Display SELinux security context of /root directory
ll -dZ /root

# Restore default SELinux file contexts for /root directory
restorecon -F /root/

# Display SELinux security context of /root directory again
ll -dZ /root

# List all SELinux booleans related to httpd
getsebool -a | grep httpd

# Set the allow_httpd_anon_write boolean to on permanently
setsebool -P allow_httpd_anon_write on

# List all available SELinux booleans under /selinux/booleans/
ll /selinux/booleans/

# Set the use_lpd_server boolean to 1 (on) temporarily
setsebool use_lpd_server 1

# Toggle the use_lpd_server boolean to switch its value
togglesebool use_lpd_server

# Toggle the use_lpd_server boolean again to switch its value back
togglesebool use_lpd_server

# Display current value of the use_lpd_server boolean
getsebool use_lpd_server

# Display all SELinux booleans and grep for use_lpd_server
getsebool -a | grep use_lpd_server
```
Certainly! Here are the commands with comments added:

### Creating Kickstart Configuration

1. **Copy Anaconda Kickstart File**:
   
   cp /root/anaconda-ks.cfg /root/ks.cfg  # Copying Anaconda Kickstart configuration to ks.cfg
   ```

2. **View Kickstart File with Line Numbers**:
   
   nl /root/ks.cfg  # Displaying Kickstart file with line numbers
   ```

3. **Edit Kickstart Configuration File**:
   
   vi /root/ks.cfg  # Editing Kickstart configuration file using vi editor
   ```

4. **Validate Kickstart Configuration Syntax**:
   
   ksvalidator /root/ks.cfg  # Validating Kickstart configuration syntax
   ```

### Using Nmap

5. **Search for Nmap Package in Yum**:
   
   yum search nmap  # Searching for Nmap package in Yum repositories
   ```

6. **Install Nmap Package**:
   
   yum install nmap -y  # Installing Nmap package with confirmation
   ```

7. **List Files Installed by Nmap Package**:
   
   rpm -ql nmap  # Listing files installed by the Nmap package
   ```

8. **View /etc/services File**:
   
   less /etc/services  # Viewing contents of /etc/services file
   ```

9. **View Nmap Services File**:
   
   less /usr/share/nmap/nmap-services  # Viewing contents of Nmap services file
   ```

10. **View Nmap Protocols File**:
    
    less /usr/share/nmap/nmap-protocols  # Viewing contents of Nmap protocols file
    ```

11. **Perform Network Discovery (Ping Scan)**:
    
    nmap -v 192.168.75.0/24  # Performing verbose network discovery scan on subnet 192.168.75.0/24
    ```

12. **Display Nmap Help Manual**:
    
    nmap --help  # Displaying Nmap help manual
    ```

13. **Perform Ping Scan with Verbose Output**:
    
    nmap -v -sP 192.168.75.20  # Performing verbose ping scan on host 192.168.75.20
    ```

14. **Perform TCP SYN Scan with Verbose Output**:
    
    nmap -v -sS 192.168.75.20  # Performing verbose TCP SYN scan on host 192.168.75.20
    ```

15. **List Files in /usr/share/nmap Directory**:
    
    ls -l /usr/share/nmap  # Listing files in /usr/share/nmap directory
    ```

16. **View Nmap MAC Prefixes File**:
    
    less /usr/share/nmap/nmap-mac-prefixes  # Viewing contents of Nmap MAC prefixes file
    ```

17. **Search for MAC Prefix '0011' in Nmap MAC Prefixes File**:
    
    grep '0011' /usr/share/nmap/nmap-mac-prefixes  # Searching for MAC prefix '0011' in Nmap MAC prefixes file
    ```

18. **Search for MAC Prefix '001143' (specific example) in Nmap MAC Prefixes File**:
    
    grep '001143' /usr/share/nmap/nmap-mac-prefixes  # Searching for MAC prefix '001143' in Nmap MAC prefixes file
    ```

19. **Search for Manufacturer Name 'Dell' in Nmap MAC Prefixes File**:
    
    grep -i 'Dell' /usr/share/nmap/nmap-mac-prefixes  # Searching for manufacturer name 'Dell' in Nmap MAC prefixes file
    ```

20. **Perform Ping Scan with Verbose Output** (example repeated for clarity):
    
    nmap -v -sP 192.168.75.20  # Performing verbose ping scan on host 192.168.75.20
    ```

It seems like you've provided a series of commands related to network scanning, configuration, and management tasks. Let's add comments to each command to clarify their purpose:


arp -a  # Display ARP cache table

nmap -v -sV 192.168.75.20  # Perform verbose service version scan on host 192.168.75.20

rpm -qa | grep ssh  # List installed packages and grep for SSH related packages

grep -i signature /etc/httpd/conf/httpd/httpd.conf  # Search for 'signature' keyword in Apache HTTP server configuration file

### linuxcbtserv1 configuration ###

vi /etc/httpd/conf/httpd.conf  # Edit Apache HTTP server configuration file
# classroom – Linuxcbt
ServerSignature Off  # Disable server signature
Systemctl restart httpd  # Restart Apache HTTP server

### linuxcbtserv2 configuration ###

vi /etc/httpd/conf/httpd.conf  # Edit Apache HTTP server configuration file
# classroom – Linuxcbt
ServerSignature Off  # Disable server signature
Systemctl restart httpd  # Restart Apache HTTP server

nmap -v -sV 192.168.75.1  # Perform verbose service version scan on router (192.168.75.1)

dig @192.168.75.1 www.linuxcbt.com  # Perform DNS lookup for www.linuxcbt.com using specified DNS server

grep -i 'cisco' /usr/share/nmap/nmap-mac-prefixes  # Search for 'cisco' in Nmap MAC prefixes file

ssh linuxcbt@192.168.75.1  # SSH into host 192.168.75.1 as user 'linuxcbt'

# Configuration on router (assuming Cisco IOS commands)

sh ru  # Show running configuration
conf t  # Enter global configuration mode
line vty 0 4  # Configure virtual terminal lines 0 to 4
transport input ssh  # Allow SSH as transport input mens3*od for VT lines
line vty 5 15  # Configure virtual terminal lines 5 to 15
transport input ssh  # Allow SSH as transport input mens3*od for VT lines
wr mem  # Write configuration changes to memory (save)
exit  # Exit from configuration mode

nmap -v -sV 192.168.75.1  # Perform verbose service version scan on router (192.168.75.1) again

nmap  # Display nmap usage/help information

nmap -v -sV -oA linuxcbtrouter1.nmap.scan.`date +%F` 192.168.75.1  # Perform verbose service version scan on router (192.168.75.1) and save results with timestamp

ls -ltr  # List files in long format with timestamp, sorted by time

less linuxcbtrouter1.nmap.scan.date.xml  # View XML output of Nmap scan results

less linuxcbtrouter1.nmap.scan.date.nmap  # View Nmap scan results in plain text

less linuxcbtrouter1.nmap.scan.date.gmap  # View graphical representation (if available) of Nmap scan results

dig linuxcbt@linuxcbtserv1.linuxcbt.internal  # Perform DNS lookup for linuxcbtserv1.linuxcbt.internal

nmap -v -6 -sV linuxcbtserv1.linuxcbt.internal  # Perform verbose IPv6 service version scan on host linuxcbtserv1.linuxcbt.internal

nmap -v -sV -p 22 -oN linuxcbtrouter1.nmap.scan.`date +%F` 192.168.75.1  # Perform verbose service version scan on port 22 of router (192.168.75.1) and save results with timestamp in plain text format

ls -ltr  # List files in long format with timestamp, sorted by time

less linuxcbtrouter1.nmap.scan.date  # View plain text output of Nmap scan results

less linuxcbtrouter1.nmap.scan.date.xml  # View XML output of Nmap scan results

less linuxcbtrouter1.nmap.scan.date.nmap  # View Nmap scan results in plain text

less linuxcbtrouter1.nmap.scan.date.gmap  # View graphical representation (if available) of Nmap scan results

# Open the browser and visit https://localhost/var/www/html/test2.txt

nmap -p 80 -v -sV 192.168.75.21  # Perform verbose service version scan on port 80 of host 192.168.75.21
```
Certainly! Here are the commands with comments added to explain their purpose:


rpm -qf  | grep tcpdump  # Query which package provides tcpdump
rpm -qf `which tcpdump`  # Query which package provides the tcpdump binary
which tcpdump  # Show location of the tcpdump binary
rpm -ql tcpdump  # List files installed by the tcpdump package
ls -l /usr/sbin/tcpdump  # List detailed information about the tcpdump executable

ifconfig  # Display network interface configuration
tcpdump -v  # Run tcpdump with verbose output
netstat -i  # Show network interfaces and statistics
tcpdump -i ens3*0  # Capture packets on ens3*0 interface
tcpdump -D  # List available network interfaces for tcpdump

cd ~linuxcbt/temp  # Change directory to ~/linuxcbt/temp (assuming linuxcbt is a user)
tcpdump -i ens3*0 -w tcpdump.full.log.`date +%F`  # Capture packets on ens3*0 interface and write to tcpdump.full.log with current date
file tcpdump.full.log...  # Display file type information for tcpdump.full.log (replace ... with actual filename)

tcpdump -r tcpdump.full.log...  # Read packets from tcpdump.full.log (replace ... with actual filename)
tcpdump -e -r tcpdump.full.log...  # Read packets with ens3*ernet header from tcpdump.full.log
tcpdump -A -r tcpdump.full.log...  # Read and display packet contents in ASCII from tcpdump.full.log
tcpdump -n -A -r tcpdump.full.log...  # Read and display packet contents in ASCII without DNS resolution from tcpdump.full.log

grep -i 5902 /etc/services  # Search for port 5902 in /etc/services

tcpdump -w tcpdump.bpf.sans.vnc.1 not port 5902  # Capture packets into tcpdump.bpf.sans.vnc.1 excluding port 5902
tcpdump -Aer tcpdump.bpf.sans.vnc.1  # Read and display ASCII packet contents with ens3*ernet header from tcpdump.bpf.sans.vnc.1
tcpdump -w tcpdump.bpf.sans.vnc.1 not tcp and port 5902  # Capture packets into tcpdump.bpf.sans.vnc.1 excluding TCP port 5902
tcpdump -w not tcp and port 5902  # Capture packets into a file named 'not' excluding TCP port 5902
ssh 192.168.75.20  # SSH into host 192.168.75.20

tcpdump -w not tcp port 5902  # Capture packets into a file named 'not' excluding TCP port 5902
ssh 192.168.75.20  # SSH into host 192.168.75.20

tcpdump -w tcpdump.bpf.sans.vnc.1 not tcp port 5902  # Capture packets into tcpdump.bpf.sans.vnc.1 excluding TCP port 5902
tcpdump --help  # Display tcpdump command help
man tcpdump  # Display tcpdump manual page

tcpdump -G -w tcpdump.bpf.sans.vnc.2 not tcp port 5902  # Rotate capture files every few seconds, capturing into tcpdump.bpf.sans.vnc.2 excluding TCP port 5902
tcpdump -r tcpdump.bpf.sans.vnc.2  # Read packets from tcpdump.bpf.sans.vnc.2

tcpdump -v -w tcpdump.dns.capture.1 udp port 53  # Capture verbose packets into tcpdump.dns.capture.1 on UDP port 53

# linuxcbtserv1 configuration
dig @linuxcbtserv2.linuxcbt.internal mail.linuxcbt.internal  # Perform DNS query for mail.linuxcbt.internal using linuxcbtserv2 DNS server
tcpdump -r tcpdump.dns.capture.1  # Read packets from tcpdump.dns.capture.1
tcpdump -v -r tcpdump.dns.capture.1  # Read verbose packets from tcpdump.dns.capture.1
```
Certainly! Here are the commands with comments added to explain their purpose:


# Start LFTP interactive shell
lftp

# Display all settings and filter for ftp related settings
lftp > set -a | grep ftp

# Exit LFTP shell
lftp > exit

# Edit LFTP configuration file
vi ~/.lftprc

# Enable debugging in LFTP
debug

# Set FTP settings for SSL/TLS
set ftp:ssl-force yes
set ftp:ssl-protect-data yes

# Connect to localhost using LFTP as user linuxcbt
lftp -u linuxcbt localhost

# List directory contents in LFTP
lftp linuxcbt@localhost > ls

# Open a new terminal and start capturing FTP traffic on port 21 using tcpdump
# Command executed outside this script

# SSH into 192.168.75.20 as root
ssh root@192.168.75.20

# Connect to localhost using LFTP as user linuxcbt
lftp -u linuxcbt localhost

# List directory contents in LFTP
lftp linuxcbt@localhost > ls

# Exit LFTP session on linuxcbtserv2
\q

# List files in /etc/pki/tls/certs directory
ls -l /etc/pki/tls/certs

# View contents of /etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt
less /etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt

# Display available ciphers supported by OpenSSL
openssl ciphers -v

# Display manual page for vsftpd.conf
man vsftpd.conf

# Search for DES-CBC3-SHA cipher in available ciphers supported by OpenSSL
openssl ciphers -v | grep 'DES-CBC3-SHA'

# Edit vsftpd configuration file
vi /etc/vsftpd/vsftpd.conf
# Enable SSL/TLS settings in vsftpd.conf
ssl_enable=yes
ssl_tlsv1=yes
rsa_cert_file=/etc/pki/tls/certs/linuxcbtserv2.linuxcbt.internal.crt

# Restart vsftpd service
systemctl restart vsftpd.service

# Exit vi editor after editing .lftprc
exit

# Display contents of .lftprc file
cat .lftprc

# Start LFTP and connect to localhost
lftp linuxcbt@localhost

# Open a new terminal and start capturing FTP traffic on loopback interface (lo) on port 21
# Command executed outside this script

# Navigate to directory temp2 in LFTP
lftp linuxcbt@localhost:~ > cd temp2

# List directory contents in LFTP
lftp linuxcbt@localhost:~/temp2 > ls

# Exit LFTP session
lftp linuxcbt@localhost:~/temp2 > \q

# Ping linuxcbtserv2.linuxcbt.internal three times
ping -c 3 linuxcbtserv2.linuxcbt.internal

# Start LFTP and connect to linuxcbtserv2.linuxcbt.internal
lftp linuxcbtserv2.linuxcbt.internal

# List directory contents in LFTP
lftp linuxcbtserv2.linuxcbt.internal :~> ls

# Exit LFTP session
lftp linuxcbtserv2.linuxcbt.internal :~> quit

# Edit .lftprc to disable SSL/TLS settings
vi ~/.lftprc

# Set FTP settings to disable SSL/TLS
set ftp:ssl-force no
set ftp:ssl-protect-data no

# Start LFTP and connect to linuxcbtserv2.linuxcbt.internal
lftp linuxcbtserv2.linuxcbt.internal

# List directory contents in LFTP
lftp linuxcbtserv2.linuxcbt.internal :~> ls

# Exit LFTP session
lftp linuxcbtserv2.linuxcbt.internal :~> \q

# Edit .lftprc to allow SSL/TLS connections
vi ~/.lftprc

# Set FTP settings to allow SSL/TLS
set ftp:ssl-allow yes

# Start LFTP and connect to linuxcbtserv2.linuxcbt.internal
lftp linuxcbtserv2.linuxcbt.internal

# List directory contents in LFTP
lftp linuxcbtserv2.linuxcbt.internal :~> ls

# Exit LFTP session
lftp linuxcbtserv2.linuxcbt.internal :~> \q

# Connect to linuxcbtserv2.linuxcbt.internal using Windows FileZilla or similar FTP client
# Instructions outside the scope of this script

# Connect to linuxcbtserv2.linuxcbt.internal using rdesktop with full screen option (-f)
rdesktop -f ip

# Edit vsftpd configuration file
vi /etc/vsftpd/vsftpd.conf
# Comment out SSL/TLS settings in vsftpd.conf
# ssl_enable=yes
# ssl_tlsv1=yes

# Restart vsftpd service
systemctl restart vsftpd

# Display contents of .lftprc file
cat ~/.lftprc

# Start LFTP and connect to linuxcbtserv2.linuxcbt.internal
lftp linuxcbtserv2.linuxcbt.internal

# List directory contents in LFTP
lftp linuxcbtserv2.linuxcbt.internal :~> ls

# Exit LFTP session
lftp linuxcbtserv2.linuxcbt.internal :~> \q

Here are the commands with comments added to explain their purpose:


# Display network interfaces and their configurations
ifconfig -a

# Remove secondary IP address 192.168.75.22 from ens3*0:1 interface
ifcfg ens3*0:1 del 192.168.75.22

# Display current network interface configurations
ifconfig

# Navigate to network configuration scripts directory
cd /etc/sysconfig/network-scripts/

# Display contents of ifcfg-ens3*0:* files (wildcard used to show all configurations)
cat ifcfg-ens3*0\:*

# Edit ifcfg-ens3*0:1 configuration file to set ONBOOT=no
vi ifcfg-ens3*0:1
# ONBOOT="no"

# Edit ifcfg-ens3*1 configuration file to set ONBOOT=no
vi ifcfg-ens3*1
# ONBOOT="no"

# Stop ens3*1 interface
ifcfg ens3*1 stop

# Display network interfaces after changes
ifconfig

# Scan localhost for open TCP and UDP ports using SYN and UDP scans
nmap -v -sS -sU localhost

# Display all listening TCP ports with their associated processes
netstat -ntulp

# Display processes listening on TCP port 25 (SMTP)
netstat -ntlp | grep 25

# Edit MySQL configuration file to bind MySQL to localhost (127.0.0.1)
vi /etc/my.cnf
# Bind=127.0.0.1

# Restart MySQL service
systemctl restart mysqld

# Verify MySQL is listening on port 3306
netstat -ntlp | grep 3306

# Verify RPC bind service is stopped and disabled
netstat -ntlp | grep 111
systemctl stop rpcbind && systemctl disable rpcbind
netstat -ntlp | grep 111

# Stop NFS services and disable them
systemctl stop nfs && systemctl disable nfs && systemctl status nfs
netstat -ntlp | grep 2049

# Stop Samba (SMB) services and disable them
systemctl stop smb && systemctl disable smb && systemctl status smb
netstat -ntlp | grep 445

# Stop NetBIOS Name Service (nmb) and disable it
netstat -ntlp | grep 139
systemctl stop nmb && systemctl disable nmb && systemctl status nmb
netstat -ntlp | grep 137

# Stop Winbind service and disable it
systemctl stop winbind && systemctl disable winbind && systemctl status winbind

# Scan localhost for open TCP and UDP ports using SYN and UDP scans
nmap -v -sS -sU localhost

# Stop DHCP server and disable it
systemctl stop dhcpd && systemctl disable dhcpd && systemctl status dhcpd

# Stop lftp service and disable it
systemctl stop lftp && systemctl disable lftp && systemctl status lftp

# List UDP services and search for TFTP (port 69), then disable it in configuration
netstat -nulp | grep 69
cat /etc/xinetd.d/tftp
# tftp disable = yes

# List telnet configuration and disable it
cat /etc/xinetd.d/telnet
# telnet disable = yes

# Edit vsftpd configuration file to disable anonymous FTP and enforce local logins with SSL
vi /etc/vsftpd/vsftpd.conf
# Anonymous_enable=NO
# Force_local_logins_ssl=yes
# Force_local_data_ssl=yes

# Restart vsftpd service
systemctl restart vsftpd

# Edit LFTP configuration file (~/.lftprc) to disallow SSL connections
vi ~/.lftprc
# Set ftp:ssl-allow no

# Start LFTP and connect to localhost as linuxcbt user
lftp linuxcbt@localhost

# List directory contents in LFTP
lftp linuxcbt@localhost:~> ls

# Exit LFTP session
lftp linuxcbt@localhost:~> exit

# Edit SSH server configuration file to restrict SSH connections
vi /etc/ssh/sshd_config
# AllowUsers root linuxcbt

# Restart SSH service
systemctl restart sshd

# Test SSH connection to localhost
ssh localhost

# Verify SSH service listening on port 22
netstat -ant | grep 22

# Attempt SSH connection as root to localhost
ssh root@localhost

# Verify SSH service listening on port 22
netstat -ant | grep 22

# Attempt SSH connection as user2 to localhost
ssh user2@localhost

# Verify SSH service listening on port 22
netstat -ant | grep 22

# Edit SSH server configuration file to restrict SSH connections further
vi /etc/ssh/sshd_config
# AllowUsers linuxcbt linuxcbt2
# PermitRootLogin no

# Restart SSH service
systemctl restart sshd

# Verify SSH connection as linuxcbt user with verbose output
ssh -vv linuxcbt@localhost

# Attempt SSH connection as root to localhost
ssh -vv root@localhost

# Scan localhost for open TCP and UDP ports using SYN and UDP scans
nmap -v -sS -sU localhost

# Attempt SSH connection as root to 192.168.75.20
ssh root@192.168.75.20

# Scan 192.168.75.21 for open TCP and UDP ports using SYN and UDP scans
nmap -v -sS -sU 192.168.75.21

# Check if IPv6 addresses are configured on interfaces
ifconfig | grep inet6

# Scan localhost for open TCP and UDP ports using IPv6
nmap -v -6 (IPV6…..)
```
